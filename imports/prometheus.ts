// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * Prometheus defines a Prometheus deployment.
 *
 * @schema Prometheus
 */
export class Prometheus extends ApiObject {
  /**
   * Defines a "Prometheus" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: PrometheusOptions) {
    super(scope, name, {
      ...options,
      kind: 'Prometheus',
      apiVersion: 'monitoring.coreos.com/v1',
    });
  }
}

/**
 * Prometheus defines a Prometheus deployment.
 *
 * @schema Prometheus
 */
export interface PrometheusOptions {
  /**
   * @schema Prometheus#metadata
   */
  readonly metadata?: any;

  /**
   * Specification of the desired behavior of the Prometheus cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
   *
   * @schema Prometheus#spec
   */
  readonly spec: PrometheusSpec;

}

/**
 * Specification of the desired behavior of the Prometheus cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
 *
 * @schema PrometheusSpec
 */
export interface PrometheusSpec {
  /**
   * AdditionalAlertManagerConfigs allows specifying a key of a Secret containing additional Prometheus AlertManager configurations. AlertManager configurations specified are appended to the configurations generated by the Prometheus Operator. Job configurations specified must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alertmanager_config. As AlertManager configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of Prometheus. It is advised to review Prometheus release notes to ensure that no incompatible AlertManager configs are going to break Prometheus after the upgrade.
   *
   * @schema PrometheusSpec#additionalAlertManagerConfigs
   */
  readonly additionalAlertManagerConfigs?: PrometheusSpecAdditionalAlertManagerConfigs;

  /**
   * AdditionalAlertRelabelConfigs allows specifying a key of a Secret containing additional Prometheus alert relabel configurations. Alert relabel configurations specified are appended to the configurations generated by the Prometheus Operator. Alert relabel configurations specified must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alert_relabel_configs. As alert relabel configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of Prometheus. It is advised to review Prometheus release notes to ensure that no incompatible alert relabel configs are going to break Prometheus after the upgrade.
   *
   * @schema PrometheusSpec#additionalAlertRelabelConfigs
   */
  readonly additionalAlertRelabelConfigs?: PrometheusSpecAdditionalAlertRelabelConfigs;

  /**
   * AdditionalScrapeConfigs allows specifying a key of a Secret containing additional Prometheus scrape configurations. Scrape configurations specified are appended to the configurations generated by the Prometheus Operator. Job configurations specified must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config. As scrape configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of Prometheus. It is advised to review Prometheus release notes to ensure that no incompatible scrape configs are going to break Prometheus after the upgrade.
   *
   * @schema PrometheusSpec#additionalScrapeConfigs
   */
  readonly additionalScrapeConfigs?: PrometheusSpecAdditionalScrapeConfigs;

  /**
   * If specified, the pod's scheduling constraints.
   *
   * @schema PrometheusSpec#affinity
   */
  readonly affinity?: PrometheusSpecAffinity;

  /**
   * Define details regarding alerting.
   *
   * @schema PrometheusSpec#alerting
   */
  readonly alerting?: PrometheusSpecAlerting;

  /**
   * APIServerConfig allows specifying a host and auth methods to access apiserver. If left empty, Prometheus is assumed to run inside of the cluster and will discover API servers automatically and use the pod's CA certificate and bearer token file at /var/run/secrets/kubernetes.io/serviceaccount/.
   *
   * @schema PrometheusSpec#apiserverConfig
   */
  readonly apiserverConfig?: PrometheusSpecApiserverConfig;

  /**
   * ArbitraryFSAccessThroughSMs configures whether configuration based on a service monitor can access arbitrary files on the file system of the Prometheus container e.g. bearer token files.
   *
   * @schema PrometheusSpec#arbitraryFSAccessThroughSMs
   */
  readonly arbitraryFSAccessThroughSMs?: PrometheusSpecArbitraryFsAccessThroughSMs;

  /**
   * Base image to use for a Prometheus deployment.
   *
   * @schema PrometheusSpec#baseImage
   */
  readonly baseImage?: string;

  /**
   * ConfigMaps is a list of ConfigMaps in the same namespace as the Prometheus object, which shall be mounted into the Prometheus Pods. The ConfigMaps are mounted into /etc/prometheus/configmaps/<configmap-name>.
   *
   * @schema PrometheusSpec#configMaps
   */
  readonly configMaps?: string[];

  /**
   * Containers allows injecting additional containers or modifying operator generated containers. This can be used to allow adding an authentication proxy to a Prometheus pod or to change the behavior of an operator generated container. Containers described here modify an operator generated container if they share the same name and modifications are done via a strategic merge patch. The current container names are: `prometheus`, `prometheus-config-reloader`, `rules-configmap-reloader`, and `thanos-sidecar`. Overriding containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.
   *
   * @schema PrometheusSpec#containers
   */
  readonly containers?: PrometheusSpecContainers[];

  /**
   * Disable prometheus compaction.
   *
   * @schema PrometheusSpec#disableCompaction
   */
  readonly disableCompaction?: boolean;

  /**
   * Enable access to prometheus web admin API. Defaults to the value of `false`. WARNING: Enabling the admin APIs enables mutating endpoints, to delete data, shutdown Prometheus, and more. Enabling this should be done with care and the user is advised to add additional authentication authorization via a proxy to ensure only clients authorized to perform these actions can do so. For more information see https://prometheus.io/docs/prometheus/latest/querying/api/#tsdb-admin-apis
   *
   * @default the value of `false`. WARNING: Enabling the admin APIs enables mutating endpoints, to delete data, shutdown Prometheus, and more. Enabling this should be done with care and the user is advised to add additional authentication authorization via a proxy to ensure only clients authorized to perform these actions can do so. For more information see https://prometheus.io/docs/prometheus/latest/querying/api/#tsdb-admin-apis
   * @schema PrometheusSpec#enableAdminAPI
   */
  readonly enableAdminAPI?: boolean;

  /**
   * EnforcedNamespaceLabel enforces adding a namespace label of origin for each alert and metric that is user created. The label value will always be the namespace of the object that is being created.
   *
   * @schema PrometheusSpec#enforcedNamespaceLabel
   */
  readonly enforcedNamespaceLabel?: string;

  /**
   * Interval between consecutive evaluations.
   *
   * @schema PrometheusSpec#evaluationInterval
   */
  readonly evaluationInterval?: string;

  /**
   * The labels to add to any time series or alerts when communicating with external systems (federation, remote storage, Alertmanager).
   *
   * @schema PrometheusSpec#externalLabels
   */
  readonly externalLabels?: { [key: string]: string };

  /**
   * The external URL the Prometheus instances will be available under. This is necessary to generate correct URLs. This is necessary if Prometheus is not served from root of a DNS name.
   *
   * @schema PrometheusSpec#externalUrl
   */
  readonly externalUrl?: string;

  /**
   * IgnoreNamespaceSelectors if set to true will ignore NamespaceSelector settings from the podmonitor and servicemonitor configs, and they will only discover endpoints within their current namespace.  Defaults to false.
   *
   * @default false.
   * @schema PrometheusSpec#ignoreNamespaceSelectors
   */
  readonly ignoreNamespaceSelectors?: boolean;

  /**
   * Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Prometheus is being configured.
   *
   * @schema PrometheusSpec#image
   */
  readonly image?: string;

  /**
   * An optional list of references to secrets in the same namespace to use for pulling prometheus and alertmanager images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod
   *
   * @schema PrometheusSpec#imagePullSecrets
   */
  readonly imagePullSecrets?: PrometheusSpecImagePullSecrets[];

  /**
   * InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the Prometheus configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.
   *
   * @schema PrometheusSpec#initContainers
   */
  readonly initContainers?: PrometheusSpecInitContainers[];

  /**
   * ListenLocal makes the Prometheus server listen on loopback, so that it does not bind against the Pod IP.
   *
   * @schema PrometheusSpec#listenLocal
   */
  readonly listenLocal?: boolean;

  /**
   * Log format for Prometheus to be configured with.
   *
   * @schema PrometheusSpec#logFormat
   */
  readonly logFormat?: string;

  /**
   * Log level for Prometheus to be configured with.
   *
   * @schema PrometheusSpec#logLevel
   */
  readonly logLevel?: string;

  /**
   * Define which Nodes the Pods are scheduled on.
   *
   * @schema PrometheusSpec#nodeSelector
   */
  readonly nodeSelector?: { [key: string]: string };

  /**
   * OverrideHonorLabels if set to true overrides all user configured honor_labels. If HonorLabels is set in ServiceMonitor or PodMonitor to true, this overrides honor_labels to false.
   *
   * @schema PrometheusSpec#overrideHonorLabels
   */
  readonly overrideHonorLabels?: boolean;

  /**
   * OverrideHonorTimestamps allows to globally enforce honoring timestamps in all scrape configs.
   *
   * @schema PrometheusSpec#overrideHonorTimestamps
   */
  readonly overrideHonorTimestamps?: boolean;

  /**
   * When a Prometheus deployment is paused, no actions except for deletion will be performed on the underlying objects.
   *
   * @schema PrometheusSpec#paused
   */
  readonly paused?: boolean;

  /**
   * PodMetadata configures Labels and Annotations which are propagated to the prometheus pods.
   *
   * @schema PrometheusSpec#podMetadata
   */
  readonly podMetadata?: PrometheusSpecPodMetadata;

  /**
   * Namespaces to be selected for PodMonitor discovery. If nil, only check own namespace.
   *
   * @schema PrometheusSpec#podMonitorNamespaceSelector
   */
  readonly podMonitorNamespaceSelector?: PrometheusSpecPodMonitorNamespaceSelector;

  /**
   * *Experimental* PodMonitors to be selected for target discovery. *Deprecated:* if neither this nor serviceMonitorSelector are specified, configuration is unmanaged.
   *
   * @schema PrometheusSpec#podMonitorSelector
   */
  readonly podMonitorSelector?: PrometheusSpecPodMonitorSelector;

  /**
   * Port name used for the pods and governing service. This defaults to web
   *
   * @schema PrometheusSpec#portName
   */
  readonly portName?: string;

  /**
   * Priority class assigned to the Pods
   *
   * @schema PrometheusSpec#priorityClassName
   */
  readonly priorityClassName?: string;

  /**
   * Name of Prometheus external label used to denote Prometheus instance name. Defaults to the value of `prometheus`. External label will _not_ be added when value is set to empty string (`""`).
   *
   * @default the value of `prometheus`. External label will _not_ be added when value is set to empty string (`""`).
   * @schema PrometheusSpec#prometheusExternalLabelName
   */
  readonly prometheusExternalLabelName?: string;

  /**
   * QuerySpec defines the query command line flags when starting Prometheus.
   *
   * @schema PrometheusSpec#query
   */
  readonly query?: PrometheusSpecQuery;

  /**
   * QueryLogFile specifies the file to which PromQL queries are logged. Note that this location must be writable, and can be persisted using an attached volume. Alternatively, the location can be set to a stdout location such as `/dev/stdout` to log querie information to the default Prometheus log stream. This is only available in versions of Prometheus >= 2.16.0. For more details, see the Prometheus docs (https://prometheus.io/docs/guides/query-log/)
   *
   * @schema PrometheusSpec#queryLogFile
   */
  readonly queryLogFile?: string;

  /**
   * If specified, the remote_read spec. This is an experimental feature, it may change in any upcoming release in a breaking way.
   *
   * @schema PrometheusSpec#remoteRead
   */
  readonly remoteRead?: PrometheusSpecRemoteRead[];

  /**
   * If specified, the remote_write spec. This is an experimental feature, it may change in any upcoming release in a breaking way.
   *
   * @schema PrometheusSpec#remoteWrite
   */
  readonly remoteWrite?: PrometheusSpecRemoteWrite[];

  /**
   * Name of Prometheus external label used to denote replica name. Defaults to the value of `prometheus_replica`. External label will _not_ be added when value is set to empty string (`""`).
   *
   * @default the value of `prometheus_replica`. External label will _not_ be added when value is set to empty string (`""`).
   * @schema PrometheusSpec#replicaExternalLabelName
   */
  readonly replicaExternalLabelName?: string;

  /**
   * Number of instances to deploy for a Prometheus deployment.
   *
   * @schema PrometheusSpec#replicas
   */
  readonly replicas?: number;

  /**
   * Define resources requests and limits for single Pods.
   *
   * @schema PrometheusSpec#resources
   */
  readonly resources?: PrometheusSpecResources;

  /**
   * Time duration Prometheus shall retain data for. Default is '24h', and must match the regular expression `[0-9]+(ms|s|m|h|d|w|y)` (milliseconds seconds minutes hours days weeks years).
   *
   * @default 24h', and must match the regular expression `[0-9]+(ms|s|m|h|d|w|y)` (milliseconds seconds minutes hours days weeks years).
   * @schema PrometheusSpec#retention
   */
  readonly retention?: string;

  /**
   * Maximum amount of disk space used by blocks.
   *
   * @schema PrometheusSpec#retentionSize
   */
  readonly retentionSize?: string;

  /**
   * The route prefix Prometheus registers HTTP handlers for. This is useful, if using ExternalURL and a proxy is rewriting HTTP routes of a request, and the actual ExternalURL is still true, but the server serves requests under a different route prefix. For example for use with `kubectl proxy`.
   *
   * @schema PrometheusSpec#routePrefix
   */
  readonly routePrefix?: string;

  /**
   * Namespaces to be selected for PrometheusRules discovery. If unspecified, only the same namespace as the Prometheus object is in is used.
   *
   * @schema PrometheusSpec#ruleNamespaceSelector
   */
  readonly ruleNamespaceSelector?: PrometheusSpecRuleNamespaceSelector;

  /**
   * A selector to select which PrometheusRules to mount for loading alerting/recording rules from. Until (excluding) Prometheus Operator v0.24.0 Prometheus Operator will migrate any legacy rule ConfigMaps to PrometheusRule custom resources selected by RuleSelector. Make sure it does not match any config maps that you do not want to be migrated.
   *
   * @schema PrometheusSpec#ruleSelector
   */
  readonly ruleSelector?: PrometheusSpecRuleSelector;

  /**
   * /--rules._/ command-line arguments.
   *
   * @schema PrometheusSpec#rules
   */
  readonly rules?: PrometheusSpecRules;

  /**
   * Interval between consecutive scrapes.
   *
   * @schema PrometheusSpec#scrapeInterval
   */
  readonly scrapeInterval?: string;

  /**
   * Secrets is a list of Secrets in the same namespace as the Prometheus object, which shall be mounted into the Prometheus Pods. The Secrets are mounted into /etc/prometheus/secrets/<secret-name>.
   *
   * @schema PrometheusSpec#secrets
   */
  readonly secrets?: string[];

  /**
   * SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.
   *
   * @schema PrometheusSpec#securityContext
   */
  readonly securityContext?: PrometheusSpecSecurityContext;

  /**
   * ServiceAccountName is the name of the ServiceAccount to use to run the Prometheus Pods.
   *
   * @schema PrometheusSpec#serviceAccountName
   */
  readonly serviceAccountName?: string;

  /**
   * Namespaces to be selected for ServiceMonitor discovery. If nil, only check own namespace.
   *
   * @schema PrometheusSpec#serviceMonitorNamespaceSelector
   */
  readonly serviceMonitorNamespaceSelector?: PrometheusSpecServiceMonitorNamespaceSelector;

  /**
   * ServiceMonitors to be selected for target discovery. *Deprecated:* if neither this nor podMonitorSelector are specified, configuration is unmanaged.
   *
   * @schema PrometheusSpec#serviceMonitorSelector
   */
  readonly serviceMonitorSelector?: PrometheusSpecServiceMonitorSelector;

  /**
   * SHA of Prometheus container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set.
   *
   * @default the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set.
   * @schema PrometheusSpec#sha
   */
  readonly sha?: string;

  /**
   * Storage spec to specify how storage shall be used.
   *
   * @schema PrometheusSpec#storage
   */
  readonly storage?: PrometheusSpecStorage;

  /**
   * Tag of Prometheus container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set.
   *
   * @default the value of `version`. Version is ignored if Tag is set.
   * @schema PrometheusSpec#tag
   */
  readonly tag?: string;

  /**
   * Thanos configuration allows configuring various aspects of a Prometheus server in a Thanos environment. 
 This section is experimental, it may change significantly without deprecation notice in any release. 
 This is experimental and may change significantly without backward compatibility in any release.
   *
   * @schema PrometheusSpec#thanos
   */
  readonly thanos?: PrometheusSpecThanos;

  /**
   * If specified, the pod's tolerations.
   *
   * @schema PrometheusSpec#tolerations
   */
  readonly tolerations?: PrometheusSpecTolerations[];

  /**
   * Version of Prometheus to be deployed.
   *
   * @schema PrometheusSpec#version
   */
  readonly version?: string;

  /**
   * VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the prometheus container, that are generated as a result of StorageSpec objects.
   *
   * @schema PrometheusSpec#volumeMounts
   */
  readonly volumeMounts?: PrometheusSpecVolumeMounts[];

  /**
   * Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.
   *
   * @schema PrometheusSpec#volumes
   */
  readonly volumes?: PrometheusSpecVolumes[];

  /**
   * Enable compression of the write-ahead log using Snappy. This flag is only available in versions of Prometheus >= 2.11.0.
   *
   * @schema PrometheusSpec#walCompression
   */
  readonly walCompression?: boolean;

}

/**
 * AdditionalAlertManagerConfigs allows specifying a key of a Secret containing additional Prometheus AlertManager configurations. AlertManager configurations specified are appended to the configurations generated by the Prometheus Operator. Job configurations specified must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alertmanager_config. As AlertManager configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of Prometheus. It is advised to review Prometheus release notes to ensure that no incompatible AlertManager configs are going to break Prometheus after the upgrade.
 *
 * @schema PrometheusSpecAdditionalAlertManagerConfigs
 */
export interface PrometheusSpecAdditionalAlertManagerConfigs {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecAdditionalAlertManagerConfigs#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecAdditionalAlertManagerConfigs#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecAdditionalAlertManagerConfigs#optional
   */
  readonly optional?: boolean;

}

/**
 * AdditionalAlertRelabelConfigs allows specifying a key of a Secret containing additional Prometheus alert relabel configurations. Alert relabel configurations specified are appended to the configurations generated by the Prometheus Operator. Alert relabel configurations specified must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alert_relabel_configs. As alert relabel configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of Prometheus. It is advised to review Prometheus release notes to ensure that no incompatible alert relabel configs are going to break Prometheus after the upgrade.
 *
 * @schema PrometheusSpecAdditionalAlertRelabelConfigs
 */
export interface PrometheusSpecAdditionalAlertRelabelConfigs {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecAdditionalAlertRelabelConfigs#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecAdditionalAlertRelabelConfigs#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecAdditionalAlertRelabelConfigs#optional
   */
  readonly optional?: boolean;

}

/**
 * AdditionalScrapeConfigs allows specifying a key of a Secret containing additional Prometheus scrape configurations. Scrape configurations specified are appended to the configurations generated by the Prometheus Operator. Job configurations specified must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config. As scrape configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of Prometheus. It is advised to review Prometheus release notes to ensure that no incompatible scrape configs are going to break Prometheus after the upgrade.
 *
 * @schema PrometheusSpecAdditionalScrapeConfigs
 */
export interface PrometheusSpecAdditionalScrapeConfigs {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecAdditionalScrapeConfigs#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecAdditionalScrapeConfigs#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecAdditionalScrapeConfigs#optional
   */
  readonly optional?: boolean;

}

/**
 * If specified, the pod's scheduling constraints.
 *
 * @schema PrometheusSpecAffinity
 */
export interface PrometheusSpecAffinity {
  /**
   * Describes node affinity scheduling rules for the pod.
   *
   * @schema PrometheusSpecAffinity#nodeAffinity
   */
  readonly nodeAffinity?: PrometheusSpecAffinityNodeAffinity;

  /**
   * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
   *
   * @schema PrometheusSpecAffinity#podAffinity
   */
  readonly podAffinity?: PrometheusSpecAffinityPodAffinity;

  /**
   * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
   *
   * @schema PrometheusSpecAffinity#podAntiAffinity
   */
  readonly podAntiAffinity?: PrometheusSpecAffinityPodAntiAffinity;

}

/**
 * Define details regarding alerting.
 *
 * @schema PrometheusSpecAlerting
 */
export interface PrometheusSpecAlerting {
  /**
   * AlertmanagerEndpoints Prometheus should fire alerts against.
   *
   * @schema PrometheusSpecAlerting#alertmanagers
   */
  readonly alertmanagers: PrometheusSpecAlertingAlertmanagers[];

}

/**
 * APIServerConfig allows specifying a host and auth methods to access apiserver. If left empty, Prometheus is assumed to run inside of the cluster and will discover API servers automatically and use the pod's CA certificate and bearer token file at /var/run/secrets/kubernetes.io/serviceaccount/.
 *
 * @schema PrometheusSpecApiserverConfig
 */
export interface PrometheusSpecApiserverConfig {
  /**
   * BasicAuth allow an endpoint to authenticate over basic authentication
   *
   * @schema PrometheusSpecApiserverConfig#basicAuth
   */
  readonly basicAuth?: PrometheusSpecApiserverConfigBasicAuth;

  /**
   * Bearer token for accessing apiserver.
   *
   * @schema PrometheusSpecApiserverConfig#bearerToken
   */
  readonly bearerToken?: string;

  /**
   * File to read bearer token for accessing apiserver.
   *
   * @schema PrometheusSpecApiserverConfig#bearerTokenFile
   */
  readonly bearerTokenFile?: string;

  /**
   * Host of apiserver. A valid string consisting of a hostname or IP followed by an optional port number
   *
   * @schema PrometheusSpecApiserverConfig#host
   */
  readonly host: string;

  /**
   * TLS Config to use for accessing apiserver.
   *
   * @schema PrometheusSpecApiserverConfig#tlsConfig
   */
  readonly tlsConfig?: PrometheusSpecApiserverConfigTlsConfig;

}

/**
 * ArbitraryFSAccessThroughSMs configures whether configuration based on a service monitor can access arbitrary files on the file system of the Prometheus container e.g. bearer token files.
 *
 * @schema PrometheusSpecArbitraryFsAccessThroughSMs
 */
export interface PrometheusSpecArbitraryFsAccessThroughSMs {
  /**
   * @schema PrometheusSpecArbitraryFsAccessThroughSMs#deny
   */
  readonly deny?: boolean;

}

/**
 * A single application container that you want to run within a pod.
 *
 * @schema PrometheusSpecContainers
 */
export interface PrometheusSpecContainers {
  /**
   * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
   *
   * @schema PrometheusSpecContainers#args
   */
  readonly args?: string[];

  /**
   * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
   *
   * @schema PrometheusSpecContainers#command
   */
  readonly command?: string[];

  /**
   * List of environment variables to set in the container. Cannot be updated.
   *
   * @schema PrometheusSpecContainers#env
   */
  readonly env?: PrometheusSpecContainersEnv[];

  /**
   * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
   *
   * @schema PrometheusSpecContainers#envFrom
   */
  readonly envFrom?: PrometheusSpecContainersEnvFrom[];

  /**
   * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
   *
   * @schema PrometheusSpecContainers#image
   */
  readonly image?: string;

  /**
   * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
   *
   * @default Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
   * @schema PrometheusSpecContainers#imagePullPolicy
   */
  readonly imagePullPolicy?: string;

  /**
   * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
   *
   * @schema PrometheusSpecContainers#lifecycle
   */
  readonly lifecycle?: PrometheusSpecContainersLifecycle;

  /**
   * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PrometheusSpecContainers#livenessProbe
   */
  readonly livenessProbe?: PrometheusSpecContainersLivenessProbe;

  /**
   * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
   *
   * @schema PrometheusSpecContainers#name
   */
  readonly name: string;

  /**
   * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
   *
   * @schema PrometheusSpecContainers#ports
   */
  readonly ports?: PrometheusSpecContainersPorts[];

  /**
   * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PrometheusSpecContainers#readinessProbe
   */
  readonly readinessProbe?: PrometheusSpecContainersReadinessProbe;

  /**
   * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
   *
   * @schema PrometheusSpecContainers#resources
   */
  readonly resources?: PrometheusSpecContainersResources;

  /**
   * Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
   *
   * @schema PrometheusSpecContainers#securityContext
   */
  readonly securityContext?: PrometheusSpecContainersSecurityContext;

  /**
   * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PrometheusSpecContainers#startupProbe
   */
  readonly startupProbe?: PrometheusSpecContainersStartupProbe;

  /**
   * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
   *
   * @default false.
   * @schema PrometheusSpecContainers#stdin
   */
  readonly stdin?: boolean;

  /**
   * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
   *
   * @default false
   * @schema PrometheusSpecContainers#stdinOnce
   */
  readonly stdinOnce?: boolean;

  /**
   * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
   *
   * @default dev/termination-log. Cannot be updated.
   * @schema PrometheusSpecContainers#terminationMessagePath
   */
  readonly terminationMessagePath?: string;

  /**
   * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
   *
   * @default File. Cannot be updated.
   * @schema PrometheusSpecContainers#terminationMessagePolicy
   */
  readonly terminationMessagePolicy?: string;

  /**
   * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
   *
   * @default false.
   * @schema PrometheusSpecContainers#tty
   */
  readonly tty?: boolean;

  /**
   * volumeDevices is the list of block devices to be used by the container.
   *
   * @schema PrometheusSpecContainers#volumeDevices
   */
  readonly volumeDevices?: PrometheusSpecContainersVolumeDevices[];

  /**
   * Pod volumes to mount into the container's filesystem. Cannot be updated.
   *
   * @schema PrometheusSpecContainers#volumeMounts
   */
  readonly volumeMounts?: PrometheusSpecContainersVolumeMounts[];

  /**
   * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
   *
   * @schema PrometheusSpecContainers#workingDir
   */
  readonly workingDir?: string;

}

/**
 * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
 *
 * @schema PrometheusSpecImagePullSecrets
 */
export interface PrometheusSpecImagePullSecrets {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecImagePullSecrets#name
   */
  readonly name?: string;

}

/**
 * A single application container that you want to run within a pod.
 *
 * @schema PrometheusSpecInitContainers
 */
export interface PrometheusSpecInitContainers {
  /**
   * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
   *
   * @schema PrometheusSpecInitContainers#args
   */
  readonly args?: string[];

  /**
   * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
   *
   * @schema PrometheusSpecInitContainers#command
   */
  readonly command?: string[];

  /**
   * List of environment variables to set in the container. Cannot be updated.
   *
   * @schema PrometheusSpecInitContainers#env
   */
  readonly env?: PrometheusSpecInitContainersEnv[];

  /**
   * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
   *
   * @schema PrometheusSpecInitContainers#envFrom
   */
  readonly envFrom?: PrometheusSpecInitContainersEnvFrom[];

  /**
   * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
   *
   * @schema PrometheusSpecInitContainers#image
   */
  readonly image?: string;

  /**
   * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
   *
   * @default Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
   * @schema PrometheusSpecInitContainers#imagePullPolicy
   */
  readonly imagePullPolicy?: string;

  /**
   * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
   *
   * @schema PrometheusSpecInitContainers#lifecycle
   */
  readonly lifecycle?: PrometheusSpecInitContainersLifecycle;

  /**
   * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PrometheusSpecInitContainers#livenessProbe
   */
  readonly livenessProbe?: PrometheusSpecInitContainersLivenessProbe;

  /**
   * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
   *
   * @schema PrometheusSpecInitContainers#name
   */
  readonly name: string;

  /**
   * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
   *
   * @schema PrometheusSpecInitContainers#ports
   */
  readonly ports?: PrometheusSpecInitContainersPorts[];

  /**
   * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PrometheusSpecInitContainers#readinessProbe
   */
  readonly readinessProbe?: PrometheusSpecInitContainersReadinessProbe;

  /**
   * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
   *
   * @schema PrometheusSpecInitContainers#resources
   */
  readonly resources?: PrometheusSpecInitContainersResources;

  /**
   * Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
   *
   * @schema PrometheusSpecInitContainers#securityContext
   */
  readonly securityContext?: PrometheusSpecInitContainersSecurityContext;

  /**
   * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PrometheusSpecInitContainers#startupProbe
   */
  readonly startupProbe?: PrometheusSpecInitContainersStartupProbe;

  /**
   * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
   *
   * @default false.
   * @schema PrometheusSpecInitContainers#stdin
   */
  readonly stdin?: boolean;

  /**
   * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
   *
   * @default false
   * @schema PrometheusSpecInitContainers#stdinOnce
   */
  readonly stdinOnce?: boolean;

  /**
   * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
   *
   * @default dev/termination-log. Cannot be updated.
   * @schema PrometheusSpecInitContainers#terminationMessagePath
   */
  readonly terminationMessagePath?: string;

  /**
   * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
   *
   * @default File. Cannot be updated.
   * @schema PrometheusSpecInitContainers#terminationMessagePolicy
   */
  readonly terminationMessagePolicy?: string;

  /**
   * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
   *
   * @default false.
   * @schema PrometheusSpecInitContainers#tty
   */
  readonly tty?: boolean;

  /**
   * volumeDevices is the list of block devices to be used by the container.
   *
   * @schema PrometheusSpecInitContainers#volumeDevices
   */
  readonly volumeDevices?: PrometheusSpecInitContainersVolumeDevices[];

  /**
   * Pod volumes to mount into the container's filesystem. Cannot be updated.
   *
   * @schema PrometheusSpecInitContainers#volumeMounts
   */
  readonly volumeMounts?: PrometheusSpecInitContainersVolumeMounts[];

  /**
   * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
   *
   * @schema PrometheusSpecInitContainers#workingDir
   */
  readonly workingDir?: string;

}

/**
 * PodMetadata configures Labels and Annotations which are propagated to the prometheus pods.
 *
 * @schema PrometheusSpecPodMetadata
 */
export interface PrometheusSpecPodMetadata {
  /**
   * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
   *
   * @schema PrometheusSpecPodMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
   *
   * @schema PrometheusSpecPodMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
   *
   * @schema PrometheusSpecPodMetadata#name
   */
  readonly name?: string;

}

/**
 * Namespaces to be selected for PodMonitor discovery. If nil, only check own namespace.
 *
 * @schema PrometheusSpecPodMonitorNamespaceSelector
 */
export interface PrometheusSpecPodMonitorNamespaceSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PrometheusSpecPodMonitorNamespaceSelector#matchExpressions
   */
  readonly matchExpressions?: PrometheusSpecPodMonitorNamespaceSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PrometheusSpecPodMonitorNamespaceSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * *Experimental* PodMonitors to be selected for target discovery. *Deprecated:* if neither this nor serviceMonitorSelector are specified, configuration is unmanaged.
 *
 * @schema PrometheusSpecPodMonitorSelector
 */
export interface PrometheusSpecPodMonitorSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PrometheusSpecPodMonitorSelector#matchExpressions
   */
  readonly matchExpressions?: PrometheusSpecPodMonitorSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PrometheusSpecPodMonitorSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * QuerySpec defines the query command line flags when starting Prometheus.
 *
 * @schema PrometheusSpecQuery
 */
export interface PrometheusSpecQuery {
  /**
   * The delta difference allowed for retrieving metrics during expression evaluations.
   *
   * @schema PrometheusSpecQuery#lookbackDelta
   */
  readonly lookbackDelta?: string;

  /**
   * Number of concurrent queries that can be run at once.
   *
   * @schema PrometheusSpecQuery#maxConcurrency
   */
  readonly maxConcurrency?: number;

  /**
   * Maximum number of samples a single query can load into memory. Note that queries will fail if they would load more samples than this into memory, so this also limits the number of samples a query can return.
   *
   * @schema PrometheusSpecQuery#maxSamples
   */
  readonly maxSamples?: number;

  /**
   * Maximum time a query may take before being aborted.
   *
   * @schema PrometheusSpecQuery#timeout
   */
  readonly timeout?: string;

}

/**
 * RemoteReadSpec defines the remote_read configuration for prometheus.
 *
 * @schema PrometheusSpecRemoteRead
 */
export interface PrometheusSpecRemoteRead {
  /**
   * BasicAuth for the URL.
   *
   * @schema PrometheusSpecRemoteRead#basicAuth
   */
  readonly basicAuth?: PrometheusSpecRemoteReadBasicAuth;

  /**
   * bearer token for remote read.
   *
   * @schema PrometheusSpecRemoteRead#bearerToken
   */
  readonly bearerToken?: string;

  /**
   * File to read bearer token for remote read.
   *
   * @schema PrometheusSpecRemoteRead#bearerTokenFile
   */
  readonly bearerTokenFile?: string;

  /**
   * The name of the remote read queue, must be unique if specified. The name is used in metrics and logging in order to differentiate read configurations.  Only valid in Prometheus versions 2.15.0 and newer.
   *
   * @schema PrometheusSpecRemoteRead#name
   */
  readonly name?: string;

  /**
   * Optional ProxyURL
   *
   * @schema PrometheusSpecRemoteRead#proxyUrl
   */
  readonly proxyUrl?: string;

  /**
   * Whether reads should be made for queries for time ranges that the local storage should have complete data for.
   *
   * @schema PrometheusSpecRemoteRead#readRecent
   */
  readonly readRecent?: boolean;

  /**
   * Timeout for requests to the remote read endpoint.
   *
   * @schema PrometheusSpecRemoteRead#remoteTimeout
   */
  readonly remoteTimeout?: string;

  /**
   * An optional list of equality matchers which have to be present in a selector to query the remote read endpoint.
   *
   * @schema PrometheusSpecRemoteRead#requiredMatchers
   */
  readonly requiredMatchers?: { [key: string]: string };

  /**
   * TLS Config to use for remote read.
   *
   * @schema PrometheusSpecRemoteRead#tlsConfig
   */
  readonly tlsConfig?: PrometheusSpecRemoteReadTlsConfig;

  /**
   * The URL of the endpoint to send samples to.
   *
   * @schema PrometheusSpecRemoteRead#url
   */
  readonly url: string;

}

/**
 * RemoteWriteSpec defines the remote_write configuration for prometheus.
 *
 * @schema PrometheusSpecRemoteWrite
 */
export interface PrometheusSpecRemoteWrite {
  /**
   * BasicAuth for the URL.
   *
   * @schema PrometheusSpecRemoteWrite#basicAuth
   */
  readonly basicAuth?: PrometheusSpecRemoteWriteBasicAuth;

  /**
   * File to read bearer token for remote write.
   *
   * @schema PrometheusSpecRemoteWrite#bearerToken
   */
  readonly bearerToken?: string;

  /**
   * File to read bearer token for remote write.
   *
   * @schema PrometheusSpecRemoteWrite#bearerTokenFile
   */
  readonly bearerTokenFile?: string;

  /**
   * The name of the remote write queue, must be unique if specified. The name is used in metrics and logging in order to differentiate queues. Only valid in Prometheus versions 2.15.0 and newer.
   *
   * @schema PrometheusSpecRemoteWrite#name
   */
  readonly name?: string;

  /**
   * Optional ProxyURL
   *
   * @schema PrometheusSpecRemoteWrite#proxyUrl
   */
  readonly proxyUrl?: string;

  /**
   * QueueConfig allows tuning of the remote write queue parameters.
   *
   * @schema PrometheusSpecRemoteWrite#queueConfig
   */
  readonly queueConfig?: PrometheusSpecRemoteWriteQueueConfig;

  /**
   * Timeout for requests to the remote write endpoint.
   *
   * @schema PrometheusSpecRemoteWrite#remoteTimeout
   */
  readonly remoteTimeout?: string;

  /**
   * TLS Config to use for remote write.
   *
   * @schema PrometheusSpecRemoteWrite#tlsConfig
   */
  readonly tlsConfig?: PrometheusSpecRemoteWriteTlsConfig;

  /**
   * The URL of the endpoint to send samples to.
   *
   * @schema PrometheusSpecRemoteWrite#url
   */
  readonly url: string;

  /**
   * The list of remote write relabel configurations.
   *
   * @schema PrometheusSpecRemoteWrite#writeRelabelConfigs
   */
  readonly writeRelabelConfigs?: PrometheusSpecRemoteWriteWriteRelabelConfigs[];

}

/**
 * Define resources requests and limits for single Pods.
 *
 * @schema PrometheusSpecResources
 */
export interface PrometheusSpecResources {
  /**
   * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
   *
   * @schema PrometheusSpecResources#limits
   */
  readonly limits?: { [key: string]: string };

  /**
   * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
   *
   * @schema PrometheusSpecResources#requests
   */
  readonly requests?: { [key: string]: string };

}

/**
 * Namespaces to be selected for PrometheusRules discovery. If unspecified, only the same namespace as the Prometheus object is in is used.
 *
 * @schema PrometheusSpecRuleNamespaceSelector
 */
export interface PrometheusSpecRuleNamespaceSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PrometheusSpecRuleNamespaceSelector#matchExpressions
   */
  readonly matchExpressions?: PrometheusSpecRuleNamespaceSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PrometheusSpecRuleNamespaceSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * A selector to select which PrometheusRules to mount for loading alerting/recording rules from. Until (excluding) Prometheus Operator v0.24.0 Prometheus Operator will migrate any legacy rule ConfigMaps to PrometheusRule custom resources selected by RuleSelector. Make sure it does not match any config maps that you do not want to be migrated.
 *
 * @schema PrometheusSpecRuleSelector
 */
export interface PrometheusSpecRuleSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PrometheusSpecRuleSelector#matchExpressions
   */
  readonly matchExpressions?: PrometheusSpecRuleSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PrometheusSpecRuleSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * /--rules._/ command-line arguments.
 *
 * @schema PrometheusSpecRules
 */
export interface PrometheusSpecRules {
  /**
   * /--rules.alert._/ command-line arguments
   *
   * @schema PrometheusSpecRules#alert
   */
  readonly alert?: PrometheusSpecRulesAlert;

}

/**
 * SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.
 *
 * @schema PrometheusSpecSecurityContext
 */
export interface PrometheusSpecSecurityContext {
  /**
   * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
 If unset, the Kubelet will not modify the ownership and permissions of any volume.
   *
   * @schema PrometheusSpecSecurityContext#fsGroup
   */
  readonly fsGroup?: number;

  /**
   * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified defaults to "Always".
   *
   * @schema PrometheusSpecSecurityContext#fsGroupChangePolicy
   */
  readonly fsGroupChangePolicy?: string;

  /**
   * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
   *
   * @schema PrometheusSpecSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema PrometheusSpecSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
   *
   * @default user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
   * @schema PrometheusSpecSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
   *
   * @schema PrometheusSpecSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?: PrometheusSpecSecurityContextSeLinuxOptions;

  /**
   * A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
   *
   * @schema PrometheusSpecSecurityContext#supplementalGroups
   */
  readonly supplementalGroups?: number[];

  /**
   * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.
   *
   * @schema PrometheusSpecSecurityContext#sysctls
   */
  readonly sysctls?: PrometheusSpecSecurityContextSysctls[];

  /**
   * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema PrometheusSpecSecurityContext#windowsOptions
   */
  readonly windowsOptions?: PrometheusSpecSecurityContextWindowsOptions;

}

/**
 * Namespaces to be selected for ServiceMonitor discovery. If nil, only check own namespace.
 *
 * @schema PrometheusSpecServiceMonitorNamespaceSelector
 */
export interface PrometheusSpecServiceMonitorNamespaceSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PrometheusSpecServiceMonitorNamespaceSelector#matchExpressions
   */
  readonly matchExpressions?: PrometheusSpecServiceMonitorNamespaceSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PrometheusSpecServiceMonitorNamespaceSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * ServiceMonitors to be selected for target discovery. *Deprecated:* if neither this nor podMonitorSelector are specified, configuration is unmanaged.
 *
 * @schema PrometheusSpecServiceMonitorSelector
 */
export interface PrometheusSpecServiceMonitorSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PrometheusSpecServiceMonitorSelector#matchExpressions
   */
  readonly matchExpressions?: PrometheusSpecServiceMonitorSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PrometheusSpecServiceMonitorSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Storage spec to specify how storage shall be used.
 *
 * @schema PrometheusSpecStorage
 */
export interface PrometheusSpecStorage {
  /**
   * Deprecated: subPath usage will be disabled by default in a future release, this option will become unnecessary. DisableMountSubPath allows to remove any subPath usage in volume mounts.
   *
   * @schema PrometheusSpecStorage#disableMountSubPath
   */
  readonly disableMountSubPath?: boolean;

  /**
   * EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
   *
   * @schema PrometheusSpecStorage#emptyDir
   */
  readonly emptyDir?: PrometheusSpecStorageEmptyDir;

  /**
   * A PVC spec to be used by the Prometheus StatefulSets.
   *
   * @schema PrometheusSpecStorage#volumeClaimTemplate
   */
  readonly volumeClaimTemplate?: PrometheusSpecStorageVolumeClaimTemplate;

}

/**
 * Thanos configuration allows configuring various aspects of a Prometheus server in a Thanos environment. 
 This section is experimental, it may change significantly without deprecation notice in any release. 
 This is experimental and may change significantly without backward compatibility in any release.
 *
 * @schema PrometheusSpecThanos
 */
export interface PrometheusSpecThanos {
  /**
   * Thanos base image if other than default.
   *
   * @schema PrometheusSpecThanos#baseImage
   */
  readonly baseImage?: string;

  /**
   * GRPCServerTLSConfig configures the gRPC server from which Thanos Querier reads recorded rule data. Note: Currently only the CAFile, CertFile, and KeyFile fields are supported. Maps to the '--grpc-server-tls-*' CLI args.
   *
   * @schema PrometheusSpecThanos#grpcServerTlsConfig
   */
  readonly grpcServerTlsConfig?: PrometheusSpecThanosGrpcServerTlsConfig;

  /**
   * Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Thanos is being configured.
   *
   * @schema PrometheusSpecThanos#image
   */
  readonly image?: string;

  /**
   * ListenLocal makes the Thanos sidecar listen on loopback, so that it does not bind against the Pod IP.
   *
   * @schema PrometheusSpecThanos#listenLocal
   */
  readonly listenLocal?: boolean;

  /**
   * LogFormat for Thanos sidecar to be configured with.
   *
   * @schema PrometheusSpecThanos#logFormat
   */
  readonly logFormat?: string;

  /**
   * LogLevel for Thanos sidecar to be configured with.
   *
   * @schema PrometheusSpecThanos#logLevel
   */
  readonly logLevel?: string;

  /**
   * ObjectStorageConfig configures object storage in Thanos.
   *
   * @schema PrometheusSpecThanos#objectStorageConfig
   */
  readonly objectStorageConfig?: PrometheusSpecThanosObjectStorageConfig;

  /**
   * Resources defines the resource requirements for the Thanos sidecar. If not provided, no requests/limits will be set
   *
   * @schema PrometheusSpecThanos#resources
   */
  readonly resources?: PrometheusSpecThanosResources;

  /**
   * SHA of Thanos container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set.
   *
   * @default the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set.
   * @schema PrometheusSpecThanos#sha
   */
  readonly sha?: string;

  /**
   * Tag of Thanos sidecar container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set.
   *
   * @default the value of `version`. Version is ignored if Tag is set.
   * @schema PrometheusSpecThanos#tag
   */
  readonly tag?: string;

  /**
   * TracingConfig configures tracing in Thanos. This is an experimental feature, it may change in any upcoming release in a breaking way.
   *
   * @schema PrometheusSpecThanos#tracingConfig
   */
  readonly tracingConfig?: PrometheusSpecThanosTracingConfig;

  /**
   * Version describes the version of Thanos to use.
   *
   * @schema PrometheusSpecThanos#version
   */
  readonly version?: string;

}

/**
 * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
 *
 * @schema PrometheusSpecTolerations
 */
export interface PrometheusSpecTolerations {
  /**
   * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
   *
   * @schema PrometheusSpecTolerations#effect
   */
  readonly effect?: string;

  /**
   * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
   *
   * @schema PrometheusSpecTolerations#key
   */
  readonly key?: string;

  /**
   * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
   *
   * @default Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
   * @schema PrometheusSpecTolerations#operator
   */
  readonly operator?: string;

  /**
   * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
   *
   * @schema PrometheusSpecTolerations#tolerationSeconds
   */
  readonly tolerationSeconds?: number;

  /**
   * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
   *
   * @schema PrometheusSpecTolerations#value
   */
  readonly value?: string;

}

/**
 * VolumeMount describes a mounting of a Volume within a container.
 *
 * @schema PrometheusSpecVolumeMounts
 */
export interface PrometheusSpecVolumeMounts {
  /**
   * Path within the container at which the volume should be mounted.  Must not contain ':'.
   *
   * @schema PrometheusSpecVolumeMounts#mountPath
   */
  readonly mountPath: string;

  /**
   * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
   *
   * @schema PrometheusSpecVolumeMounts#mountPropagation
   */
  readonly mountPropagation?: string;

  /**
   * This must match the Name of a Volume.
   *
   * @schema PrometheusSpecVolumeMounts#name
   */
  readonly name: string;

  /**
   * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
   *
   * @default false.
   * @schema PrometheusSpecVolumeMounts#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
   *
   * @default volume's root).
   * @schema PrometheusSpecVolumeMounts#subPath
   */
  readonly subPath?: string;

  /**
   * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
   *
   * @default volume's root). SubPathExpr and SubPath are mutually exclusive.
   * @schema PrometheusSpecVolumeMounts#subPathExpr
   */
  readonly subPathExpr?: string;

}

/**
 * Volume represents a named volume in a pod that may be accessed by any container in the pod.
 *
 * @schema PrometheusSpecVolumes
 */
export interface PrometheusSpecVolumes {
  /**
   * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
   *
   * @schema PrometheusSpecVolumes#awsElasticBlockStore
   */
  readonly awsElasticBlockStore?: PrometheusSpecVolumesAwsElasticBlockStore;

  /**
   * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
   *
   * @schema PrometheusSpecVolumes#azureDisk
   */
  readonly azureDisk?: PrometheusSpecVolumesAzureDisk;

  /**
   * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
   *
   * @schema PrometheusSpecVolumes#azureFile
   */
  readonly azureFile?: PrometheusSpecVolumesAzureFile;

  /**
   * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
   *
   * @schema PrometheusSpecVolumes#cephfs
   */
  readonly cephfs?: PrometheusSpecVolumesCephfs;

  /**
   * Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
   *
   * @schema PrometheusSpecVolumes#cinder
   */
  readonly cinder?: PrometheusSpecVolumesCinder;

  /**
   * ConfigMap represents a configMap that should populate this volume
   *
   * @schema PrometheusSpecVolumes#configMap
   */
  readonly configMap?: PrometheusSpecVolumesConfigMap;

  /**
   * CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).
   *
   * @schema PrometheusSpecVolumes#csi
   */
  readonly csi?: PrometheusSpecVolumesCsi;

  /**
   * DownwardAPI represents downward API about the pod that should populate this volume
   *
   * @schema PrometheusSpecVolumes#downwardAPI
   */
  readonly downwardAPI?: PrometheusSpecVolumesDownwardApi;

  /**
   * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
   *
   * @schema PrometheusSpecVolumes#emptyDir
   */
  readonly emptyDir?: PrometheusSpecVolumesEmptyDir;

  /**
   * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
   *
   * @schema PrometheusSpecVolumes#fc
   */
  readonly fc?: PrometheusSpecVolumesFc;

  /**
   * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
   *
   * @schema PrometheusSpecVolumes#flexVolume
   */
  readonly flexVolume?: PrometheusSpecVolumesFlexVolume;

  /**
   * Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
   *
   * @schema PrometheusSpecVolumes#flocker
   */
  readonly flocker?: PrometheusSpecVolumesFlocker;

  /**
   * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
   *
   * @schema PrometheusSpecVolumes#gcePersistentDisk
   */
  readonly gcePersistentDisk?: PrometheusSpecVolumesGcePersistentDisk;

  /**
   * GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
   *
   * @schema PrometheusSpecVolumes#gitRepo
   */
  readonly gitRepo?: PrometheusSpecVolumesGitRepo;

  /**
   * Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
   *
   * @schema PrometheusSpecVolumes#glusterfs
   */
  readonly glusterfs?: PrometheusSpecVolumesGlusterfs;

  /**
   * HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
   *
   * @schema PrometheusSpecVolumes#hostPath
   */
  readonly hostPath?: PrometheusSpecVolumesHostPath;

  /**
   * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
   *
   * @schema PrometheusSpecVolumes#iscsi
   */
  readonly iscsi?: PrometheusSpecVolumesIscsi;

  /**
   * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema PrometheusSpecVolumes#name
   */
  readonly name: string;

  /**
   * NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
   *
   * @schema PrometheusSpecVolumes#nfs
   */
  readonly nfs?: PrometheusSpecVolumesNfs;

  /**
   * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
   *
   * @schema PrometheusSpecVolumes#persistentVolumeClaim
   */
  readonly persistentVolumeClaim?: PrometheusSpecVolumesPersistentVolumeClaim;

  /**
   * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
   *
   * @schema PrometheusSpecVolumes#photonPersistentDisk
   */
  readonly photonPersistentDisk?: PrometheusSpecVolumesPhotonPersistentDisk;

  /**
   * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
   *
   * @schema PrometheusSpecVolumes#portworxVolume
   */
  readonly portworxVolume?: PrometheusSpecVolumesPortworxVolume;

  /**
   * Items for all in one resources secrets, configmaps, and downward API
   *
   * @schema PrometheusSpecVolumes#projected
   */
  readonly projected?: PrometheusSpecVolumesProjected;

  /**
   * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
   *
   * @schema PrometheusSpecVolumes#quobyte
   */
  readonly quobyte?: PrometheusSpecVolumesQuobyte;

  /**
   * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
   *
   * @schema PrometheusSpecVolumes#rbd
   */
  readonly rbd?: PrometheusSpecVolumesRbd;

  /**
   * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
   *
   * @schema PrometheusSpecVolumes#scaleIO
   */
  readonly scaleIO?: PrometheusSpecVolumesScaleIo;

  /**
   * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
   *
   * @schema PrometheusSpecVolumes#secret
   */
  readonly secret?: PrometheusSpecVolumesSecret;

  /**
   * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
   *
   * @schema PrometheusSpecVolumes#storageos
   */
  readonly storageos?: PrometheusSpecVolumesStorageos;

  /**
   * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
   *
   * @schema PrometheusSpecVolumes#vsphereVolume
   */
  readonly vsphereVolume?: PrometheusSpecVolumesVsphereVolume;

}

/**
 * Describes node affinity scheduling rules for the pod.
 *
 * @schema PrometheusSpecAffinityNodeAffinity
 */
export interface PrometheusSpecAffinityNodeAffinity {
  /**
   * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
   *
   * @schema PrometheusSpecAffinityNodeAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
   *
   * @schema PrometheusSpecAffinityNodeAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;

}

/**
 * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
 *
 * @schema PrometheusSpecAffinityPodAffinity
 */
export interface PrometheusSpecAffinityPodAffinity {
  /**
   * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
   *
   * @schema PrometheusSpecAffinityPodAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
   *
   * @schema PrometheusSpecAffinityPodAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];

}

/**
 * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
 *
 * @schema PrometheusSpecAffinityPodAntiAffinity
 */
export interface PrometheusSpecAffinityPodAntiAffinity {
  /**
   * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
   *
   * @schema PrometheusSpecAffinityPodAntiAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
   *
   * @schema PrometheusSpecAffinityPodAntiAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];

}

/**
 * AlertmanagerEndpoints defines a selection of a single Endpoints object containing alertmanager IPs to fire alerts against.
 *
 * @schema PrometheusSpecAlertingAlertmanagers
 */
export interface PrometheusSpecAlertingAlertmanagers {
  /**
   * Version of the Alertmanager API that Prometheus uses to send alerts. It can be "v1" or "v2".
   *
   * @schema PrometheusSpecAlertingAlertmanagers#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * BearerTokenFile to read from filesystem to use when authenticating to Alertmanager.
   *
   * @schema PrometheusSpecAlertingAlertmanagers#bearerTokenFile
   */
  readonly bearerTokenFile?: string;

  /**
   * Name of Endpoints object in Namespace.
   *
   * @schema PrometheusSpecAlertingAlertmanagers#name
   */
  readonly name: string;

  /**
   * Namespace of Endpoints object.
   *
   * @schema PrometheusSpecAlertingAlertmanagers#namespace
   */
  readonly namespace: string;

  /**
   * Prefix for the HTTP path alerts are pushed to.
   *
   * @schema PrometheusSpecAlertingAlertmanagers#pathPrefix
   */
  readonly pathPrefix?: string;

  /**
   * Port the Alertmanager API is exposed on.
   *
   * @schema PrometheusSpecAlertingAlertmanagers#port
   */
  readonly port: PrometheusSpecAlertingAlertmanagersPort;

  /**
   * Scheme to use when firing alerts.
   *
   * @schema PrometheusSpecAlertingAlertmanagers#scheme
   */
  readonly scheme?: string;

  /**
   * TLS Config to use for alertmanager connection.
   *
   * @schema PrometheusSpecAlertingAlertmanagers#tlsConfig
   */
  readonly tlsConfig?: PrometheusSpecAlertingAlertmanagersTlsConfig;

}

/**
 * BasicAuth allow an endpoint to authenticate over basic authentication
 *
 * @schema PrometheusSpecApiserverConfigBasicAuth
 */
export interface PrometheusSpecApiserverConfigBasicAuth {
  /**
   * The secret in the service monitor namespace that contains the password for authentication.
   *
   * @schema PrometheusSpecApiserverConfigBasicAuth#password
   */
  readonly password?: PrometheusSpecApiserverConfigBasicAuthPassword;

  /**
   * The secret in the service monitor namespace that contains the username for authentication.
   *
   * @schema PrometheusSpecApiserverConfigBasicAuth#username
   */
  readonly username?: PrometheusSpecApiserverConfigBasicAuthUsername;

}

/**
 * TLS Config to use for accessing apiserver.
 *
 * @schema PrometheusSpecApiserverConfigTlsConfig
 */
export interface PrometheusSpecApiserverConfigTlsConfig {
  /**
   * Stuct containing the CA cert to use for the targets.
   *
   * @schema PrometheusSpecApiserverConfigTlsConfig#ca
   */
  readonly ca?: PrometheusSpecApiserverConfigTlsConfigCa;

  /**
   * Path to the CA cert in the Prometheus container to use for the targets.
   *
   * @schema PrometheusSpecApiserverConfigTlsConfig#caFile
   */
  readonly caFile?: string;

  /**
   * Struct containing the client cert file for the targets.
   *
   * @schema PrometheusSpecApiserverConfigTlsConfig#cert
   */
  readonly cert?: PrometheusSpecApiserverConfigTlsConfigCert;

  /**
   * Path to the client cert file in the Prometheus container for the targets.
   *
   * @schema PrometheusSpecApiserverConfigTlsConfig#certFile
   */
  readonly certFile?: string;

  /**
   * Disable target certificate validation.
   *
   * @schema PrometheusSpecApiserverConfigTlsConfig#insecureSkipVerify
   */
  readonly insecureSkipVerify?: boolean;

  /**
   * Path to the client key file in the Prometheus container for the targets.
   *
   * @schema PrometheusSpecApiserverConfigTlsConfig#keyFile
   */
  readonly keyFile?: string;

  /**
   * Secret containing the client key file for the targets.
   *
   * @schema PrometheusSpecApiserverConfigTlsConfig#keySecret
   */
  readonly keySecret?: PrometheusSpecApiserverConfigTlsConfigKeySecret;

  /**
   * Used to verify the hostname for the targets.
   *
   * @schema PrometheusSpecApiserverConfigTlsConfig#serverName
   */
  readonly serverName?: string;

}

/**
 * EnvVar represents an environment variable present in a Container.
 *
 * @schema PrometheusSpecContainersEnv
 */
export interface PrometheusSpecContainersEnv {
  /**
   * Name of the environment variable. Must be a C_IDENTIFIER.
   *
   * @schema PrometheusSpecContainersEnv#name
   */
  readonly name: string;

  /**
   * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
   *
   * @default .
   * @schema PrometheusSpecContainersEnv#value
   */
  readonly value?: string;

  /**
   * Source for the environment variable's value. Cannot be used if value is not empty.
   *
   * @schema PrometheusSpecContainersEnv#valueFrom
   */
  readonly valueFrom?: PrometheusSpecContainersEnvValueFrom;

}

/**
 * EnvFromSource represents the source of a set of ConfigMaps
 *
 * @schema PrometheusSpecContainersEnvFrom
 */
export interface PrometheusSpecContainersEnvFrom {
  /**
   * The ConfigMap to select from
   *
   * @schema PrometheusSpecContainersEnvFrom#configMapRef
   */
  readonly configMapRef?: PrometheusSpecContainersEnvFromConfigMapRef;

  /**
   * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
   *
   * @schema PrometheusSpecContainersEnvFrom#prefix
   */
  readonly prefix?: string;

  /**
   * The Secret to select from
   *
   * @schema PrometheusSpecContainersEnvFrom#secretRef
   */
  readonly secretRef?: PrometheusSpecContainersEnvFromSecretRef;

}

/**
 * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
 *
 * @schema PrometheusSpecContainersLifecycle
 */
export interface PrometheusSpecContainersLifecycle {
  /**
   * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
   *
   * @schema PrometheusSpecContainersLifecycle#postStart
   */
  readonly postStart?: PrometheusSpecContainersLifecyclePostStart;

  /**
   * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
   *
   * @schema PrometheusSpecContainersLifecycle#preStop
   */
  readonly preStop?: PrometheusSpecContainersLifecyclePreStop;

}

/**
 * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
 *
 * @schema PrometheusSpecContainersLivenessProbe
 */
export interface PrometheusSpecContainersLivenessProbe {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PrometheusSpecContainersLivenessProbe#exec
   */
  readonly exec?: PrometheusSpecContainersLivenessProbeExec;

  /**
   * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
   *
   * @default 3. Minimum value is 1.
   * @schema PrometheusSpecContainersLivenessProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PrometheusSpecContainersLivenessProbe#httpGet
   */
  readonly httpGet?: PrometheusSpecContainersLivenessProbeHttpGet;

  /**
   * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PrometheusSpecContainersLivenessProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
   *
   * @default 10 seconds. Minimum value is 1.
   * @schema PrometheusSpecContainersLivenessProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
   *
   * @default 1. Must be 1 for liveness and startup. Minimum value is 1.
   * @schema PrometheusSpecContainersLivenessProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PrometheusSpecContainersLivenessProbe#tcpSocket
   */
  readonly tcpSocket?: PrometheusSpecContainersLivenessProbeTcpSocket;

  /**
   * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @default 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   * @schema PrometheusSpecContainersLivenessProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * ContainerPort represents a network port in a single container.
 *
 * @schema PrometheusSpecContainersPorts
 */
export interface PrometheusSpecContainersPorts {
  /**
   * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
   *
   * @schema PrometheusSpecContainersPorts#containerPort
   */
  readonly containerPort: number;

  /**
   * What host IP to bind the external port to.
   *
   * @schema PrometheusSpecContainersPorts#hostIP
   */
  readonly hostIP?: string;

  /**
   * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
   *
   * @schema PrometheusSpecContainersPorts#hostPort
   */
  readonly hostPort?: number;

  /**
   * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
   *
   * @schema PrometheusSpecContainersPorts#name
   */
  readonly name?: string;

  /**
   * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
   *
   * @default TCP".
   * @schema PrometheusSpecContainersPorts#protocol
   */
  readonly protocol?: string;

}

/**
 * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
 *
 * @schema PrometheusSpecContainersReadinessProbe
 */
export interface PrometheusSpecContainersReadinessProbe {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PrometheusSpecContainersReadinessProbe#exec
   */
  readonly exec?: PrometheusSpecContainersReadinessProbeExec;

  /**
   * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
   *
   * @default 3. Minimum value is 1.
   * @schema PrometheusSpecContainersReadinessProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PrometheusSpecContainersReadinessProbe#httpGet
   */
  readonly httpGet?: PrometheusSpecContainersReadinessProbeHttpGet;

  /**
   * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PrometheusSpecContainersReadinessProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
   *
   * @default 10 seconds. Minimum value is 1.
   * @schema PrometheusSpecContainersReadinessProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
   *
   * @default 1. Must be 1 for liveness and startup. Minimum value is 1.
   * @schema PrometheusSpecContainersReadinessProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PrometheusSpecContainersReadinessProbe#tcpSocket
   */
  readonly tcpSocket?: PrometheusSpecContainersReadinessProbeTcpSocket;

  /**
   * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @default 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   * @schema PrometheusSpecContainersReadinessProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
 *
 * @schema PrometheusSpecContainersResources
 */
export interface PrometheusSpecContainersResources {
  /**
   * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
   *
   * @schema PrometheusSpecContainersResources#limits
   */
  readonly limits?: { [key: string]: string };

  /**
   * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
   *
   * @schema PrometheusSpecContainersResources#requests
   */
  readonly requests?: { [key: string]: string };

}

/**
 * Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
 *
 * @schema PrometheusSpecContainersSecurityContext
 */
export interface PrometheusSpecContainersSecurityContext {
  /**
   * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
   *
   * @schema PrometheusSpecContainersSecurityContext#allowPrivilegeEscalation
   */
  readonly allowPrivilegeEscalation?: boolean;

  /**
   * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
   *
   * @default the default set of capabilities granted by the container runtime.
   * @schema PrometheusSpecContainersSecurityContext#capabilities
   */
  readonly capabilities?: PrometheusSpecContainersSecurityContextCapabilities;

  /**
   * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
   *
   * @default false.
   * @schema PrometheusSpecContainersSecurityContext#privileged
   */
  readonly privileged?: boolean;

  /**
   * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
   *
   * @schema PrometheusSpecContainersSecurityContext#procMount
   */
  readonly procMount?: string;

  /**
   * Whether this container has a read-only root filesystem. Default is false.
   *
   * @default false.
   * @schema PrometheusSpecContainersSecurityContext#readOnlyRootFilesystem
   */
  readonly readOnlyRootFilesystem?: boolean;

  /**
   * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema PrometheusSpecContainersSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema PrometheusSpecContainersSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @default user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   * @schema PrometheusSpecContainersSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema PrometheusSpecContainersSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?: PrometheusSpecContainersSecurityContextSeLinuxOptions;

  /**
   * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema PrometheusSpecContainersSecurityContext#windowsOptions
   */
  readonly windowsOptions?: PrometheusSpecContainersSecurityContextWindowsOptions;

}

/**
 * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
 *
 * @schema PrometheusSpecContainersStartupProbe
 */
export interface PrometheusSpecContainersStartupProbe {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PrometheusSpecContainersStartupProbe#exec
   */
  readonly exec?: PrometheusSpecContainersStartupProbeExec;

  /**
   * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
   *
   * @default 3. Minimum value is 1.
   * @schema PrometheusSpecContainersStartupProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PrometheusSpecContainersStartupProbe#httpGet
   */
  readonly httpGet?: PrometheusSpecContainersStartupProbeHttpGet;

  /**
   * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PrometheusSpecContainersStartupProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
   *
   * @default 10 seconds. Minimum value is 1.
   * @schema PrometheusSpecContainersStartupProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
   *
   * @default 1. Must be 1 for liveness and startup. Minimum value is 1.
   * @schema PrometheusSpecContainersStartupProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PrometheusSpecContainersStartupProbe#tcpSocket
   */
  readonly tcpSocket?: PrometheusSpecContainersStartupProbeTcpSocket;

  /**
   * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @default 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   * @schema PrometheusSpecContainersStartupProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * volumeDevice describes a mapping of a raw block device within a container.
 *
 * @schema PrometheusSpecContainersVolumeDevices
 */
export interface PrometheusSpecContainersVolumeDevices {
  /**
   * devicePath is the path inside of the container that the device will be mapped to.
   *
   * @schema PrometheusSpecContainersVolumeDevices#devicePath
   */
  readonly devicePath: string;

  /**
   * name must match the name of a persistentVolumeClaim in the pod
   *
   * @schema PrometheusSpecContainersVolumeDevices#name
   */
  readonly name: string;

}

/**
 * VolumeMount describes a mounting of a Volume within a container.
 *
 * @schema PrometheusSpecContainersVolumeMounts
 */
export interface PrometheusSpecContainersVolumeMounts {
  /**
   * Path within the container at which the volume should be mounted.  Must not contain ':'.
   *
   * @schema PrometheusSpecContainersVolumeMounts#mountPath
   */
  readonly mountPath: string;

  /**
   * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
   *
   * @schema PrometheusSpecContainersVolumeMounts#mountPropagation
   */
  readonly mountPropagation?: string;

  /**
   * This must match the Name of a Volume.
   *
   * @schema PrometheusSpecContainersVolumeMounts#name
   */
  readonly name: string;

  /**
   * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
   *
   * @default false.
   * @schema PrometheusSpecContainersVolumeMounts#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
   *
   * @default volume's root).
   * @schema PrometheusSpecContainersVolumeMounts#subPath
   */
  readonly subPath?: string;

  /**
   * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
   *
   * @default volume's root). SubPathExpr and SubPath are mutually exclusive.
   * @schema PrometheusSpecContainersVolumeMounts#subPathExpr
   */
  readonly subPathExpr?: string;

}

/**
 * EnvVar represents an environment variable present in a Container.
 *
 * @schema PrometheusSpecInitContainersEnv
 */
export interface PrometheusSpecInitContainersEnv {
  /**
   * Name of the environment variable. Must be a C_IDENTIFIER.
   *
   * @schema PrometheusSpecInitContainersEnv#name
   */
  readonly name: string;

  /**
   * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
   *
   * @default .
   * @schema PrometheusSpecInitContainersEnv#value
   */
  readonly value?: string;

  /**
   * Source for the environment variable's value. Cannot be used if value is not empty.
   *
   * @schema PrometheusSpecInitContainersEnv#valueFrom
   */
  readonly valueFrom?: PrometheusSpecInitContainersEnvValueFrom;

}

/**
 * EnvFromSource represents the source of a set of ConfigMaps
 *
 * @schema PrometheusSpecInitContainersEnvFrom
 */
export interface PrometheusSpecInitContainersEnvFrom {
  /**
   * The ConfigMap to select from
   *
   * @schema PrometheusSpecInitContainersEnvFrom#configMapRef
   */
  readonly configMapRef?: PrometheusSpecInitContainersEnvFromConfigMapRef;

  /**
   * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
   *
   * @schema PrometheusSpecInitContainersEnvFrom#prefix
   */
  readonly prefix?: string;

  /**
   * The Secret to select from
   *
   * @schema PrometheusSpecInitContainersEnvFrom#secretRef
   */
  readonly secretRef?: PrometheusSpecInitContainersEnvFromSecretRef;

}

/**
 * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
 *
 * @schema PrometheusSpecInitContainersLifecycle
 */
export interface PrometheusSpecInitContainersLifecycle {
  /**
   * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
   *
   * @schema PrometheusSpecInitContainersLifecycle#postStart
   */
  readonly postStart?: PrometheusSpecInitContainersLifecyclePostStart;

  /**
   * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
   *
   * @schema PrometheusSpecInitContainersLifecycle#preStop
   */
  readonly preStop?: PrometheusSpecInitContainersLifecyclePreStop;

}

/**
 * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
 *
 * @schema PrometheusSpecInitContainersLivenessProbe
 */
export interface PrometheusSpecInitContainersLivenessProbe {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PrometheusSpecInitContainersLivenessProbe#exec
   */
  readonly exec?: PrometheusSpecInitContainersLivenessProbeExec;

  /**
   * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
   *
   * @default 3. Minimum value is 1.
   * @schema PrometheusSpecInitContainersLivenessProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PrometheusSpecInitContainersLivenessProbe#httpGet
   */
  readonly httpGet?: PrometheusSpecInitContainersLivenessProbeHttpGet;

  /**
   * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PrometheusSpecInitContainersLivenessProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
   *
   * @default 10 seconds. Minimum value is 1.
   * @schema PrometheusSpecInitContainersLivenessProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
   *
   * @default 1. Must be 1 for liveness and startup. Minimum value is 1.
   * @schema PrometheusSpecInitContainersLivenessProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PrometheusSpecInitContainersLivenessProbe#tcpSocket
   */
  readonly tcpSocket?: PrometheusSpecInitContainersLivenessProbeTcpSocket;

  /**
   * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @default 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   * @schema PrometheusSpecInitContainersLivenessProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * ContainerPort represents a network port in a single container.
 *
 * @schema PrometheusSpecInitContainersPorts
 */
export interface PrometheusSpecInitContainersPorts {
  /**
   * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
   *
   * @schema PrometheusSpecInitContainersPorts#containerPort
   */
  readonly containerPort: number;

  /**
   * What host IP to bind the external port to.
   *
   * @schema PrometheusSpecInitContainersPorts#hostIP
   */
  readonly hostIP?: string;

  /**
   * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
   *
   * @schema PrometheusSpecInitContainersPorts#hostPort
   */
  readonly hostPort?: number;

  /**
   * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
   *
   * @schema PrometheusSpecInitContainersPorts#name
   */
  readonly name?: string;

  /**
   * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
   *
   * @default TCP".
   * @schema PrometheusSpecInitContainersPorts#protocol
   */
  readonly protocol?: string;

}

/**
 * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
 *
 * @schema PrometheusSpecInitContainersReadinessProbe
 */
export interface PrometheusSpecInitContainersReadinessProbe {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PrometheusSpecInitContainersReadinessProbe#exec
   */
  readonly exec?: PrometheusSpecInitContainersReadinessProbeExec;

  /**
   * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
   *
   * @default 3. Minimum value is 1.
   * @schema PrometheusSpecInitContainersReadinessProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PrometheusSpecInitContainersReadinessProbe#httpGet
   */
  readonly httpGet?: PrometheusSpecInitContainersReadinessProbeHttpGet;

  /**
   * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PrometheusSpecInitContainersReadinessProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
   *
   * @default 10 seconds. Minimum value is 1.
   * @schema PrometheusSpecInitContainersReadinessProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
   *
   * @default 1. Must be 1 for liveness and startup. Minimum value is 1.
   * @schema PrometheusSpecInitContainersReadinessProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PrometheusSpecInitContainersReadinessProbe#tcpSocket
   */
  readonly tcpSocket?: PrometheusSpecInitContainersReadinessProbeTcpSocket;

  /**
   * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @default 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   * @schema PrometheusSpecInitContainersReadinessProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
 *
 * @schema PrometheusSpecInitContainersResources
 */
export interface PrometheusSpecInitContainersResources {
  /**
   * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
   *
   * @schema PrometheusSpecInitContainersResources#limits
   */
  readonly limits?: { [key: string]: string };

  /**
   * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
   *
   * @schema PrometheusSpecInitContainersResources#requests
   */
  readonly requests?: { [key: string]: string };

}

/**
 * Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
 *
 * @schema PrometheusSpecInitContainersSecurityContext
 */
export interface PrometheusSpecInitContainersSecurityContext {
  /**
   * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
   *
   * @schema PrometheusSpecInitContainersSecurityContext#allowPrivilegeEscalation
   */
  readonly allowPrivilegeEscalation?: boolean;

  /**
   * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
   *
   * @default the default set of capabilities granted by the container runtime.
   * @schema PrometheusSpecInitContainersSecurityContext#capabilities
   */
  readonly capabilities?: PrometheusSpecInitContainersSecurityContextCapabilities;

  /**
   * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
   *
   * @default false.
   * @schema PrometheusSpecInitContainersSecurityContext#privileged
   */
  readonly privileged?: boolean;

  /**
   * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
   *
   * @schema PrometheusSpecInitContainersSecurityContext#procMount
   */
  readonly procMount?: string;

  /**
   * Whether this container has a read-only root filesystem. Default is false.
   *
   * @default false.
   * @schema PrometheusSpecInitContainersSecurityContext#readOnlyRootFilesystem
   */
  readonly readOnlyRootFilesystem?: boolean;

  /**
   * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema PrometheusSpecInitContainersSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema PrometheusSpecInitContainersSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @default user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   * @schema PrometheusSpecInitContainersSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema PrometheusSpecInitContainersSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?: PrometheusSpecInitContainersSecurityContextSeLinuxOptions;

  /**
   * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema PrometheusSpecInitContainersSecurityContext#windowsOptions
   */
  readonly windowsOptions?: PrometheusSpecInitContainersSecurityContextWindowsOptions;

}

/**
 * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
 *
 * @schema PrometheusSpecInitContainersStartupProbe
 */
export interface PrometheusSpecInitContainersStartupProbe {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PrometheusSpecInitContainersStartupProbe#exec
   */
  readonly exec?: PrometheusSpecInitContainersStartupProbeExec;

  /**
   * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
   *
   * @default 3. Minimum value is 1.
   * @schema PrometheusSpecInitContainersStartupProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PrometheusSpecInitContainersStartupProbe#httpGet
   */
  readonly httpGet?: PrometheusSpecInitContainersStartupProbeHttpGet;

  /**
   * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PrometheusSpecInitContainersStartupProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
   *
   * @default 10 seconds. Minimum value is 1.
   * @schema PrometheusSpecInitContainersStartupProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
   *
   * @default 1. Must be 1 for liveness and startup. Minimum value is 1.
   * @schema PrometheusSpecInitContainersStartupProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PrometheusSpecInitContainersStartupProbe#tcpSocket
   */
  readonly tcpSocket?: PrometheusSpecInitContainersStartupProbeTcpSocket;

  /**
   * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @default 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   * @schema PrometheusSpecInitContainersStartupProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * volumeDevice describes a mapping of a raw block device within a container.
 *
 * @schema PrometheusSpecInitContainersVolumeDevices
 */
export interface PrometheusSpecInitContainersVolumeDevices {
  /**
   * devicePath is the path inside of the container that the device will be mapped to.
   *
   * @schema PrometheusSpecInitContainersVolumeDevices#devicePath
   */
  readonly devicePath: string;

  /**
   * name must match the name of a persistentVolumeClaim in the pod
   *
   * @schema PrometheusSpecInitContainersVolumeDevices#name
   */
  readonly name: string;

}

/**
 * VolumeMount describes a mounting of a Volume within a container.
 *
 * @schema PrometheusSpecInitContainersVolumeMounts
 */
export interface PrometheusSpecInitContainersVolumeMounts {
  /**
   * Path within the container at which the volume should be mounted.  Must not contain ':'.
   *
   * @schema PrometheusSpecInitContainersVolumeMounts#mountPath
   */
  readonly mountPath: string;

  /**
   * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
   *
   * @schema PrometheusSpecInitContainersVolumeMounts#mountPropagation
   */
  readonly mountPropagation?: string;

  /**
   * This must match the Name of a Volume.
   *
   * @schema PrometheusSpecInitContainersVolumeMounts#name
   */
  readonly name: string;

  /**
   * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
   *
   * @default false.
   * @schema PrometheusSpecInitContainersVolumeMounts#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
   *
   * @default volume's root).
   * @schema PrometheusSpecInitContainersVolumeMounts#subPath
   */
  readonly subPath?: string;

  /**
   * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
   *
   * @default volume's root). SubPathExpr and SubPath are mutually exclusive.
   * @schema PrometheusSpecInitContainersVolumeMounts#subPathExpr
   */
  readonly subPathExpr?: string;

}

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PrometheusSpecPodMonitorNamespaceSelectorMatchExpressions
 */
export interface PrometheusSpecPodMonitorNamespaceSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PrometheusSpecPodMonitorNamespaceSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PrometheusSpecPodMonitorNamespaceSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema PrometheusSpecPodMonitorNamespaceSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PrometheusSpecPodMonitorSelectorMatchExpressions
 */
export interface PrometheusSpecPodMonitorSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PrometheusSpecPodMonitorSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PrometheusSpecPodMonitorSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema PrometheusSpecPodMonitorSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * BasicAuth for the URL.
 *
 * @schema PrometheusSpecRemoteReadBasicAuth
 */
export interface PrometheusSpecRemoteReadBasicAuth {
  /**
   * The secret in the service monitor namespace that contains the password for authentication.
   *
   * @schema PrometheusSpecRemoteReadBasicAuth#password
   */
  readonly password?: PrometheusSpecRemoteReadBasicAuthPassword;

  /**
   * The secret in the service monitor namespace that contains the username for authentication.
   *
   * @schema PrometheusSpecRemoteReadBasicAuth#username
   */
  readonly username?: PrometheusSpecRemoteReadBasicAuthUsername;

}

/**
 * TLS Config to use for remote read.
 *
 * @schema PrometheusSpecRemoteReadTlsConfig
 */
export interface PrometheusSpecRemoteReadTlsConfig {
  /**
   * Stuct containing the CA cert to use for the targets.
   *
   * @schema PrometheusSpecRemoteReadTlsConfig#ca
   */
  readonly ca?: PrometheusSpecRemoteReadTlsConfigCa;

  /**
   * Path to the CA cert in the Prometheus container to use for the targets.
   *
   * @schema PrometheusSpecRemoteReadTlsConfig#caFile
   */
  readonly caFile?: string;

  /**
   * Struct containing the client cert file for the targets.
   *
   * @schema PrometheusSpecRemoteReadTlsConfig#cert
   */
  readonly cert?: PrometheusSpecRemoteReadTlsConfigCert;

  /**
   * Path to the client cert file in the Prometheus container for the targets.
   *
   * @schema PrometheusSpecRemoteReadTlsConfig#certFile
   */
  readonly certFile?: string;

  /**
   * Disable target certificate validation.
   *
   * @schema PrometheusSpecRemoteReadTlsConfig#insecureSkipVerify
   */
  readonly insecureSkipVerify?: boolean;

  /**
   * Path to the client key file in the Prometheus container for the targets.
   *
   * @schema PrometheusSpecRemoteReadTlsConfig#keyFile
   */
  readonly keyFile?: string;

  /**
   * Secret containing the client key file for the targets.
   *
   * @schema PrometheusSpecRemoteReadTlsConfig#keySecret
   */
  readonly keySecret?: PrometheusSpecRemoteReadTlsConfigKeySecret;

  /**
   * Used to verify the hostname for the targets.
   *
   * @schema PrometheusSpecRemoteReadTlsConfig#serverName
   */
  readonly serverName?: string;

}

/**
 * BasicAuth for the URL.
 *
 * @schema PrometheusSpecRemoteWriteBasicAuth
 */
export interface PrometheusSpecRemoteWriteBasicAuth {
  /**
   * The secret in the service monitor namespace that contains the password for authentication.
   *
   * @schema PrometheusSpecRemoteWriteBasicAuth#password
   */
  readonly password?: PrometheusSpecRemoteWriteBasicAuthPassword;

  /**
   * The secret in the service monitor namespace that contains the username for authentication.
   *
   * @schema PrometheusSpecRemoteWriteBasicAuth#username
   */
  readonly username?: PrometheusSpecRemoteWriteBasicAuthUsername;

}

/**
 * QueueConfig allows tuning of the remote write queue parameters.
 *
 * @schema PrometheusSpecRemoteWriteQueueConfig
 */
export interface PrometheusSpecRemoteWriteQueueConfig {
  /**
   * BatchSendDeadline is the maximum time a sample will wait in buffer.
   *
   * @schema PrometheusSpecRemoteWriteQueueConfig#batchSendDeadline
   */
  readonly batchSendDeadline?: string;

  /**
   * Capacity is the number of samples to buffer per shard before we start dropping them.
   *
   * @schema PrometheusSpecRemoteWriteQueueConfig#capacity
   */
  readonly capacity?: number;

  /**
   * MaxBackoff is the maximum retry delay.
   *
   * @schema PrometheusSpecRemoteWriteQueueConfig#maxBackoff
   */
  readonly maxBackoff?: string;

  /**
   * MaxRetries is the maximum number of times to retry a batch on recoverable errors.
   *
   * @schema PrometheusSpecRemoteWriteQueueConfig#maxRetries
   */
  readonly maxRetries?: number;

  /**
   * MaxSamplesPerSend is the maximum number of samples per send.
   *
   * @schema PrometheusSpecRemoteWriteQueueConfig#maxSamplesPerSend
   */
  readonly maxSamplesPerSend?: number;

  /**
   * MaxShards is the maximum number of shards, i.e. amount of concurrency.
   *
   * @schema PrometheusSpecRemoteWriteQueueConfig#maxShards
   */
  readonly maxShards?: number;

  /**
   * MinBackoff is the initial retry delay. Gets doubled for every retry.
   *
   * @schema PrometheusSpecRemoteWriteQueueConfig#minBackoff
   */
  readonly minBackoff?: string;

  /**
   * MinShards is the minimum number of shards, i.e. amount of concurrency.
   *
   * @schema PrometheusSpecRemoteWriteQueueConfig#minShards
   */
  readonly minShards?: number;

}

/**
 * TLS Config to use for remote write.
 *
 * @schema PrometheusSpecRemoteWriteTlsConfig
 */
export interface PrometheusSpecRemoteWriteTlsConfig {
  /**
   * Stuct containing the CA cert to use for the targets.
   *
   * @schema PrometheusSpecRemoteWriteTlsConfig#ca
   */
  readonly ca?: PrometheusSpecRemoteWriteTlsConfigCa;

  /**
   * Path to the CA cert in the Prometheus container to use for the targets.
   *
   * @schema PrometheusSpecRemoteWriteTlsConfig#caFile
   */
  readonly caFile?: string;

  /**
   * Struct containing the client cert file for the targets.
   *
   * @schema PrometheusSpecRemoteWriteTlsConfig#cert
   */
  readonly cert?: PrometheusSpecRemoteWriteTlsConfigCert;

  /**
   * Path to the client cert file in the Prometheus container for the targets.
   *
   * @schema PrometheusSpecRemoteWriteTlsConfig#certFile
   */
  readonly certFile?: string;

  /**
   * Disable target certificate validation.
   *
   * @schema PrometheusSpecRemoteWriteTlsConfig#insecureSkipVerify
   */
  readonly insecureSkipVerify?: boolean;

  /**
   * Path to the client key file in the Prometheus container for the targets.
   *
   * @schema PrometheusSpecRemoteWriteTlsConfig#keyFile
   */
  readonly keyFile?: string;

  /**
   * Secret containing the client key file for the targets.
   *
   * @schema PrometheusSpecRemoteWriteTlsConfig#keySecret
   */
  readonly keySecret?: PrometheusSpecRemoteWriteTlsConfigKeySecret;

  /**
   * Used to verify the hostname for the targets.
   *
   * @schema PrometheusSpecRemoteWriteTlsConfig#serverName
   */
  readonly serverName?: string;

}

/**
 * RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
 *
 * @schema PrometheusSpecRemoteWriteWriteRelabelConfigs
 */
export interface PrometheusSpecRemoteWriteWriteRelabelConfigs {
  /**
   * Action to perform based on regex matching. Default is 'replace'
   *
   * @default replace'
   * @schema PrometheusSpecRemoteWriteWriteRelabelConfigs#action
   */
  readonly action?: string;

  /**
   * Modulus to take of the hash of the source label values.
   *
   * @schema PrometheusSpecRemoteWriteWriteRelabelConfigs#modulus
   */
  readonly modulus?: number;

  /**
   * Regular expression against which the extracted value is matched. Default is '(.*)'
   *
   * @default '
   * @schema PrometheusSpecRemoteWriteWriteRelabelConfigs#regex
   */
  readonly regex?: string;

  /**
   * Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'
   *
   * @default 1'
   * @schema PrometheusSpecRemoteWriteWriteRelabelConfigs#replacement
   */
  readonly replacement?: string;

  /**
   * Separator placed between concatenated source label values. default is ';'.
   *
   * @schema PrometheusSpecRemoteWriteWriteRelabelConfigs#separator
   */
  readonly separator?: string;

  /**
   * The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
   *
   * @schema PrometheusSpecRemoteWriteWriteRelabelConfigs#sourceLabels
   */
  readonly sourceLabels?: string[];

  /**
   * Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
   *
   * @schema PrometheusSpecRemoteWriteWriteRelabelConfigs#targetLabel
   */
  readonly targetLabel?: string;

}

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PrometheusSpecRuleNamespaceSelectorMatchExpressions
 */
export interface PrometheusSpecRuleNamespaceSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PrometheusSpecRuleNamespaceSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PrometheusSpecRuleNamespaceSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema PrometheusSpecRuleNamespaceSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PrometheusSpecRuleSelectorMatchExpressions
 */
export interface PrometheusSpecRuleSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PrometheusSpecRuleSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PrometheusSpecRuleSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema PrometheusSpecRuleSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * /--rules.alert._/ command-line arguments
 *
 * @schema PrometheusSpecRulesAlert
 */
export interface PrometheusSpecRulesAlert {
  /**
   * Minimum duration between alert and restored 'for' state. This is maintained only for alerts with configured 'for' time greater than grace period.
   *
   * @schema PrometheusSpecRulesAlert#forGracePeriod
   */
  readonly forGracePeriod?: string;

  /**
   * Max time to tolerate prometheus outage for restoring 'for' state of alert.
   *
   * @schema PrometheusSpecRulesAlert#forOutageTolerance
   */
  readonly forOutageTolerance?: string;

  /**
   * Minimum amount of time to wait before resending an alert to Alertmanager.
   *
   * @schema PrometheusSpecRulesAlert#resendDelay
   */
  readonly resendDelay?: string;

}

/**
 * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
 *
 * @schema PrometheusSpecSecurityContextSeLinuxOptions
 */
export interface PrometheusSpecSecurityContextSeLinuxOptions {
  /**
   * Level is SELinux level label that applies to the container.
   *
   * @schema PrometheusSpecSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * Role is a SELinux role label that applies to the container.
   *
   * @schema PrometheusSpecSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * Type is a SELinux type label that applies to the container.
   *
   * @schema PrometheusSpecSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * User is a SELinux user label that applies to the container.
   *
   * @schema PrometheusSpecSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;

}

/**
 * Sysctl defines a kernel parameter to be set
 *
 * @schema PrometheusSpecSecurityContextSysctls
 */
export interface PrometheusSpecSecurityContextSysctls {
  /**
   * Name of a property to set
   *
   * @schema PrometheusSpecSecurityContextSysctls#name
   */
  readonly name: string;

  /**
   * Value of a property to set
   *
   * @schema PrometheusSpecSecurityContextSysctls#value
   */
  readonly value: string;

}

/**
 * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
 *
 * @schema PrometheusSpecSecurityContextWindowsOptions
 */
export interface PrometheusSpecSecurityContextWindowsOptions {
  /**
   * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
   *
   * @schema PrometheusSpecSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * GMSACredentialSpecName is the name of the GMSA credential spec to use.
   *
   * @schema PrometheusSpecSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

  /**
   * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @default the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   * @schema PrometheusSpecSecurityContextWindowsOptions#runAsUserName
   */
  readonly runAsUserName?: string;

}

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PrometheusSpecServiceMonitorNamespaceSelectorMatchExpressions
 */
export interface PrometheusSpecServiceMonitorNamespaceSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PrometheusSpecServiceMonitorNamespaceSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PrometheusSpecServiceMonitorNamespaceSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema PrometheusSpecServiceMonitorNamespaceSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PrometheusSpecServiceMonitorSelectorMatchExpressions
 */
export interface PrometheusSpecServiceMonitorSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PrometheusSpecServiceMonitorSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PrometheusSpecServiceMonitorSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema PrometheusSpecServiceMonitorSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
 *
 * @schema PrometheusSpecStorageEmptyDir
 */
export interface PrometheusSpecStorageEmptyDir {
  /**
   * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
   *
   * @schema PrometheusSpecStorageEmptyDir#medium
   */
  readonly medium?: string;

  /**
   * Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
   *
   * @schema PrometheusSpecStorageEmptyDir#sizeLimit
   */
  readonly sizeLimit?: string;

}

/**
 * A PVC spec to be used by the Prometheus StatefulSets.
 *
 * @schema PrometheusSpecStorageVolumeClaimTemplate
 */
export interface PrometheusSpecStorageVolumeClaimTemplate {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplate#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplate#kind
   */
  readonly kind?: string;

  /**
   * EmbeddedMetadata contains metadata relevant to an EmbeddedResource.
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplate#metadata
   */
  readonly metadata?: PrometheusSpecStorageVolumeClaimTemplateMetadata;

  /**
   * Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplate#spec
   */
  readonly spec?: PrometheusSpecStorageVolumeClaimTemplateSpec;

  /**
   * Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplate#status
   */
  readonly status?: PrometheusSpecStorageVolumeClaimTemplateStatus;

}

/**
 * GRPCServerTLSConfig configures the gRPC server from which Thanos Querier reads recorded rule data. Note: Currently only the CAFile, CertFile, and KeyFile fields are supported. Maps to the '--grpc-server-tls-*' CLI args.
 *
 * @schema PrometheusSpecThanosGrpcServerTlsConfig
 */
export interface PrometheusSpecThanosGrpcServerTlsConfig {
  /**
   * Stuct containing the CA cert to use for the targets.
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfig#ca
   */
  readonly ca?: PrometheusSpecThanosGrpcServerTlsConfigCa;

  /**
   * Path to the CA cert in the Prometheus container to use for the targets.
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfig#caFile
   */
  readonly caFile?: string;

  /**
   * Struct containing the client cert file for the targets.
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfig#cert
   */
  readonly cert?: PrometheusSpecThanosGrpcServerTlsConfigCert;

  /**
   * Path to the client cert file in the Prometheus container for the targets.
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfig#certFile
   */
  readonly certFile?: string;

  /**
   * Disable target certificate validation.
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfig#insecureSkipVerify
   */
  readonly insecureSkipVerify?: boolean;

  /**
   * Path to the client key file in the Prometheus container for the targets.
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfig#keyFile
   */
  readonly keyFile?: string;

  /**
   * Secret containing the client key file for the targets.
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfig#keySecret
   */
  readonly keySecret?: PrometheusSpecThanosGrpcServerTlsConfigKeySecret;

  /**
   * Used to verify the hostname for the targets.
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfig#serverName
   */
  readonly serverName?: string;

}

/**
 * ObjectStorageConfig configures object storage in Thanos.
 *
 * @schema PrometheusSpecThanosObjectStorageConfig
 */
export interface PrometheusSpecThanosObjectStorageConfig {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecThanosObjectStorageConfig#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecThanosObjectStorageConfig#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecThanosObjectStorageConfig#optional
   */
  readonly optional?: boolean;

}

/**
 * Resources defines the resource requirements for the Thanos sidecar. If not provided, no requests/limits will be set
 *
 * @schema PrometheusSpecThanosResources
 */
export interface PrometheusSpecThanosResources {
  /**
   * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
   *
   * @schema PrometheusSpecThanosResources#limits
   */
  readonly limits?: { [key: string]: string };

  /**
   * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
   *
   * @schema PrometheusSpecThanosResources#requests
   */
  readonly requests?: { [key: string]: string };

}

/**
 * TracingConfig configures tracing in Thanos. This is an experimental feature, it may change in any upcoming release in a breaking way.
 *
 * @schema PrometheusSpecThanosTracingConfig
 */
export interface PrometheusSpecThanosTracingConfig {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecThanosTracingConfig#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecThanosTracingConfig#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecThanosTracingConfig#optional
   */
  readonly optional?: boolean;

}

/**
 * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
 *
 * @schema PrometheusSpecVolumesAwsElasticBlockStore
 */
export interface PrometheusSpecVolumesAwsElasticBlockStore {
  /**
   * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
   *
   * @schema PrometheusSpecVolumesAwsElasticBlockStore#fsType
   */
  readonly fsType?: string;

  /**
   * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
   *
   * @schema PrometheusSpecVolumesAwsElasticBlockStore#partition
   */
  readonly partition?: number;

  /**
   * Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
   *
   * @schema PrometheusSpecVolumesAwsElasticBlockStore#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
   *
   * @schema PrometheusSpecVolumesAwsElasticBlockStore#volumeID
   */
  readonly volumeID: string;

}

/**
 * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
 *
 * @schema PrometheusSpecVolumesAzureDisk
 */
export interface PrometheusSpecVolumesAzureDisk {
  /**
   * Host Caching mode: None, Read Only, Read Write.
   *
   * @schema PrometheusSpecVolumesAzureDisk#cachingMode
   */
  readonly cachingMode?: string;

  /**
   * The Name of the data disk in the blob storage
   *
   * @schema PrometheusSpecVolumesAzureDisk#diskName
   */
  readonly diskName: string;

  /**
   * The URI the data disk in the blob storage
   *
   * @schema PrometheusSpecVolumesAzureDisk#diskURI
   */
  readonly diskURI: string;

  /**
   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
   *
   * @schema PrometheusSpecVolumesAzureDisk#fsType
   */
  readonly fsType?: string;

  /**
   * Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
   *
   * @schema PrometheusSpecVolumesAzureDisk#kind
   */
  readonly kind?: string;

  /**
   * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   *
   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   * @schema PrometheusSpecVolumesAzureDisk#readOnly
   */
  readonly readOnly?: boolean;

}

/**
 * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
 *
 * @schema PrometheusSpecVolumesAzureFile
 */
export interface PrometheusSpecVolumesAzureFile {
  /**
   * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   *
   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   * @schema PrometheusSpecVolumesAzureFile#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * the name of secret that contains Azure Storage Account Name and Key
   *
   * @schema PrometheusSpecVolumesAzureFile#secretName
   */
  readonly secretName: string;

  /**
   * Share Name
   *
   * @schema PrometheusSpecVolumesAzureFile#shareName
   */
  readonly shareName: string;

}

/**
 * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
 *
 * @schema PrometheusSpecVolumesCephfs
 */
export interface PrometheusSpecVolumesCephfs {
  /**
   * Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
   *
   * @schema PrometheusSpecVolumesCephfs#monitors
   */
  readonly monitors: string[];

  /**
   * Optional: Used as the mounted root, rather than the full Ceph tree, default is /
   *
   * @schema PrometheusSpecVolumesCephfs#path
   */
  readonly path?: string;

  /**
   * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
   *
   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
   * @schema PrometheusSpecVolumesCephfs#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
   *
   * @schema PrometheusSpecVolumesCephfs#secretFile
   */
  readonly secretFile?: string;

  /**
   * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
   *
   * @schema PrometheusSpecVolumesCephfs#secretRef
   */
  readonly secretRef?: PrometheusSpecVolumesCephfsSecretRef;

  /**
   * Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
   *
   * @schema PrometheusSpecVolumesCephfs#user
   */
  readonly user?: string;

}

/**
 * Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
 *
 * @schema PrometheusSpecVolumesCinder
 */
export interface PrometheusSpecVolumesCinder {
  /**
   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
   *
   * @schema PrometheusSpecVolumesCinder#fsType
   */
  readonly fsType?: string;

  /**
   * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
   *
   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
   * @schema PrometheusSpecVolumesCinder#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * Optional: points to a secret object containing parameters used to connect to OpenStack.
   *
   * @schema PrometheusSpecVolumesCinder#secretRef
   */
  readonly secretRef?: PrometheusSpecVolumesCinderSecretRef;

  /**
   * volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
   *
   * @schema PrometheusSpecVolumesCinder#volumeID
   */
  readonly volumeID: string;

}

/**
 * ConfigMap represents a configMap that should populate this volume
 *
 * @schema PrometheusSpecVolumesConfigMap
 */
export interface PrometheusSpecVolumesConfigMap {
  /**
   * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   *
   * @default 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   * @schema PrometheusSpecVolumesConfigMap#defaultMode
   */
  readonly defaultMode?: number;

  /**
   * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
   *
   * @schema PrometheusSpecVolumesConfigMap#items
   */
  readonly items?: PrometheusSpecVolumesConfigMapItems[];

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecVolumesConfigMap#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap or its keys must be defined
   *
   * @schema PrometheusSpecVolumesConfigMap#optional
   */
  readonly optional?: boolean;

}

/**
 * CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).
 *
 * @schema PrometheusSpecVolumesCsi
 */
export interface PrometheusSpecVolumesCsi {
  /**
   * Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
   *
   * @schema PrometheusSpecVolumesCsi#driver
   */
  readonly driver: string;

  /**
   * Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
   *
   * @schema PrometheusSpecVolumesCsi#fsType
   */
  readonly fsType?: string;

  /**
   * NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
   *
   * @schema PrometheusSpecVolumesCsi#nodePublishSecretRef
   */
  readonly nodePublishSecretRef?: PrometheusSpecVolumesCsiNodePublishSecretRef;

  /**
   * Specifies a read-only configuration for the volume. Defaults to false (read/write).
   *
   * @default false (read/write).
   * @schema PrometheusSpecVolumesCsi#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
   *
   * @schema PrometheusSpecVolumesCsi#volumeAttributes
   */
  readonly volumeAttributes?: { [key: string]: string };

}

/**
 * DownwardAPI represents downward API about the pod that should populate this volume
 *
 * @schema PrometheusSpecVolumesDownwardApi
 */
export interface PrometheusSpecVolumesDownwardApi {
  /**
   * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   *
   * @default 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   * @schema PrometheusSpecVolumesDownwardApi#defaultMode
   */
  readonly defaultMode?: number;

  /**
   * Items is a list of downward API volume file
   *
   * @schema PrometheusSpecVolumesDownwardApi#items
   */
  readonly items?: PrometheusSpecVolumesDownwardApiItems[];

}

/**
 * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
 *
 * @schema PrometheusSpecVolumesEmptyDir
 */
export interface PrometheusSpecVolumesEmptyDir {
  /**
   * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
   *
   * @schema PrometheusSpecVolumesEmptyDir#medium
   */
  readonly medium?: string;

  /**
   * Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
   *
   * @schema PrometheusSpecVolumesEmptyDir#sizeLimit
   */
  readonly sizeLimit?: string;

}

/**
 * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
 *
 * @schema PrometheusSpecVolumesFc
 */
export interface PrometheusSpecVolumesFc {
  /**
   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
   *
   * @schema PrometheusSpecVolumesFc#fsType
   */
  readonly fsType?: string;

  /**
   * Optional: FC target lun number
   *
   * @schema PrometheusSpecVolumesFc#lun
   */
  readonly lun?: number;

  /**
   * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   *
   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   * @schema PrometheusSpecVolumesFc#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * Optional: FC target worldwide names (WWNs)
   *
   * @schema PrometheusSpecVolumesFc#targetWWNs
   */
  readonly targetWWNs?: string[];

  /**
   * Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
   *
   * @schema PrometheusSpecVolumesFc#wwids
   */
  readonly wwids?: string[];

}

/**
 * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
 *
 * @schema PrometheusSpecVolumesFlexVolume
 */
export interface PrometheusSpecVolumesFlexVolume {
  /**
   * Driver is the name of the driver to use for this volume.
   *
   * @schema PrometheusSpecVolumesFlexVolume#driver
   */
  readonly driver: string;

  /**
   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
   *
   * @schema PrometheusSpecVolumesFlexVolume#fsType
   */
  readonly fsType?: string;

  /**
   * Optional: Extra command options if any.
   *
   * @schema PrometheusSpecVolumesFlexVolume#options
   */
  readonly options?: { [key: string]: string };

  /**
   * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   *
   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   * @schema PrometheusSpecVolumesFlexVolume#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
   *
   * @schema PrometheusSpecVolumesFlexVolume#secretRef
   */
  readonly secretRef?: PrometheusSpecVolumesFlexVolumeSecretRef;

}

/**
 * Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
 *
 * @schema PrometheusSpecVolumesFlocker
 */
export interface PrometheusSpecVolumesFlocker {
  /**
   * Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
   *
   * @schema PrometheusSpecVolumesFlocker#datasetName
   */
  readonly datasetName?: string;

  /**
   * UUID of the dataset. This is unique identifier of a Flocker dataset
   *
   * @schema PrometheusSpecVolumesFlocker#datasetUUID
   */
  readonly datasetUUID?: string;

}

/**
 * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
 *
 * @schema PrometheusSpecVolumesGcePersistentDisk
 */
export interface PrometheusSpecVolumesGcePersistentDisk {
  /**
   * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
   *
   * @schema PrometheusSpecVolumesGcePersistentDisk#fsType
   */
  readonly fsType?: string;

  /**
   * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
   *
   * @schema PrometheusSpecVolumesGcePersistentDisk#partition
   */
  readonly partition?: number;

  /**
   * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
   *
   * @schema PrometheusSpecVolumesGcePersistentDisk#pdName
   */
  readonly pdName: string;

  /**
   * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
   *
   * @default false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
   * @schema PrometheusSpecVolumesGcePersistentDisk#readOnly
   */
  readonly readOnly?: boolean;

}

/**
 * GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
 *
 * @schema PrometheusSpecVolumesGitRepo
 */
export interface PrometheusSpecVolumesGitRepo {
  /**
   * Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
   *
   * @schema PrometheusSpecVolumesGitRepo#directory
   */
  readonly directory?: string;

  /**
   * Repository URL
   *
   * @schema PrometheusSpecVolumesGitRepo#repository
   */
  readonly repository: string;

  /**
   * Commit hash for the specified revision.
   *
   * @schema PrometheusSpecVolumesGitRepo#revision
   */
  readonly revision?: string;

}

/**
 * Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
 *
 * @schema PrometheusSpecVolumesGlusterfs
 */
export interface PrometheusSpecVolumesGlusterfs {
  /**
   * EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
   *
   * @schema PrometheusSpecVolumesGlusterfs#endpoints
   */
  readonly endpoints: string;

  /**
   * Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
   *
   * @schema PrometheusSpecVolumesGlusterfs#path
   */
  readonly path: string;

  /**
   * ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
   *
   * @default false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
   * @schema PrometheusSpecVolumesGlusterfs#readOnly
   */
  readonly readOnly?: boolean;

}

/**
 * HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
 *
 * @schema PrometheusSpecVolumesHostPath
 */
export interface PrometheusSpecVolumesHostPath {
  /**
   * Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
   *
   * @schema PrometheusSpecVolumesHostPath#path
   */
  readonly path: string;

  /**
   * Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
   *
   * @default More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
   * @schema PrometheusSpecVolumesHostPath#type
   */
  readonly type?: string;

}

/**
 * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
 *
 * @schema PrometheusSpecVolumesIscsi
 */
export interface PrometheusSpecVolumesIscsi {
  /**
   * whether support iSCSI Discovery CHAP authentication
   *
   * @schema PrometheusSpecVolumesIscsi#chapAuthDiscovery
   */
  readonly chapAuthDiscovery?: boolean;

  /**
   * whether support iSCSI Session CHAP authentication
   *
   * @schema PrometheusSpecVolumesIscsi#chapAuthSession
   */
  readonly chapAuthSession?: boolean;

  /**
   * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
   *
   * @schema PrometheusSpecVolumesIscsi#fsType
   */
  readonly fsType?: string;

  /**
   * Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
   *
   * @schema PrometheusSpecVolumesIscsi#initiatorName
   */
  readonly initiatorName?: string;

  /**
   * Target iSCSI Qualified Name.
   *
   * @schema PrometheusSpecVolumesIscsi#iqn
   */
  readonly iqn: string;

  /**
   * iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
   *
   * @default default' (tcp).
   * @schema PrometheusSpecVolumesIscsi#iscsiInterface
   */
  readonly iscsiInterface?: string;

  /**
   * iSCSI Target Lun number.
   *
   * @schema PrometheusSpecVolumesIscsi#lun
   */
  readonly lun: number;

  /**
   * iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
   *
   * @schema PrometheusSpecVolumesIscsi#portals
   */
  readonly portals?: string[];

  /**
   * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
   *
   * @default false.
   * @schema PrometheusSpecVolumesIscsi#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * CHAP Secret for iSCSI target and initiator authentication
   *
   * @schema PrometheusSpecVolumesIscsi#secretRef
   */
  readonly secretRef?: PrometheusSpecVolumesIscsiSecretRef;

  /**
   * iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
   *
   * @schema PrometheusSpecVolumesIscsi#targetPortal
   */
  readonly targetPortal: string;

}

/**
 * NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
 *
 * @schema PrometheusSpecVolumesNfs
 */
export interface PrometheusSpecVolumesNfs {
  /**
   * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
   *
   * @schema PrometheusSpecVolumesNfs#path
   */
  readonly path: string;

  /**
   * ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
   *
   * @default false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
   * @schema PrometheusSpecVolumesNfs#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
   *
   * @schema PrometheusSpecVolumesNfs#server
   */
  readonly server: string;

}

/**
 * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
 *
 * @schema PrometheusSpecVolumesPersistentVolumeClaim
 */
export interface PrometheusSpecVolumesPersistentVolumeClaim {
  /**
   * ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
   *
   * @schema PrometheusSpecVolumesPersistentVolumeClaim#claimName
   */
  readonly claimName: string;

  /**
   * Will force the ReadOnly setting in VolumeMounts. Default false.
   *
   * @schema PrometheusSpecVolumesPersistentVolumeClaim#readOnly
   */
  readonly readOnly?: boolean;

}

/**
 * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
 *
 * @schema PrometheusSpecVolumesPhotonPersistentDisk
 */
export interface PrometheusSpecVolumesPhotonPersistentDisk {
  /**
   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
   *
   * @schema PrometheusSpecVolumesPhotonPersistentDisk#fsType
   */
  readonly fsType?: string;

  /**
   * ID that identifies Photon Controller persistent disk
   *
   * @schema PrometheusSpecVolumesPhotonPersistentDisk#pdID
   */
  readonly pdID: string;

}

/**
 * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
 *
 * @schema PrometheusSpecVolumesPortworxVolume
 */
export interface PrometheusSpecVolumesPortworxVolume {
  /**
   * FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
   *
   * @schema PrometheusSpecVolumesPortworxVolume#fsType
   */
  readonly fsType?: string;

  /**
   * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   *
   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   * @schema PrometheusSpecVolumesPortworxVolume#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * VolumeID uniquely identifies a Portworx volume
   *
   * @schema PrometheusSpecVolumesPortworxVolume#volumeID
   */
  readonly volumeID: string;

}

/**
 * Items for all in one resources secrets, configmaps, and downward API
 *
 * @schema PrometheusSpecVolumesProjected
 */
export interface PrometheusSpecVolumesProjected {
  /**
   * Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   *
   * @schema PrometheusSpecVolumesProjected#defaultMode
   */
  readonly defaultMode?: number;

  /**
   * list of volume projections
   *
   * @schema PrometheusSpecVolumesProjected#sources
   */
  readonly sources: PrometheusSpecVolumesProjectedSources[];

}

/**
 * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
 *
 * @schema PrometheusSpecVolumesQuobyte
 */
export interface PrometheusSpecVolumesQuobyte {
  /**
   * Group to map volume access to Default is no group
   *
   * @default no group
   * @schema PrometheusSpecVolumesQuobyte#group
   */
  readonly group?: string;

  /**
   * ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
   *
   * @default false.
   * @schema PrometheusSpecVolumesQuobyte#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
   *
   * @schema PrometheusSpecVolumesQuobyte#registry
   */
  readonly registry: string;

  /**
   * Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
   *
   * @schema PrometheusSpecVolumesQuobyte#tenant
   */
  readonly tenant?: string;

  /**
   * User to map volume access to Defaults to serivceaccount user
   *
   * @default serivceaccount user
   * @schema PrometheusSpecVolumesQuobyte#user
   */
  readonly user?: string;

  /**
   * Volume is a string that references an already created Quobyte volume by name.
   *
   * @schema PrometheusSpecVolumesQuobyte#volume
   */
  readonly volume: string;

}

/**
 * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
 *
 * @schema PrometheusSpecVolumesRbd
 */
export interface PrometheusSpecVolumesRbd {
  /**
   * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
   *
   * @schema PrometheusSpecVolumesRbd#fsType
   */
  readonly fsType?: string;

  /**
   * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   *
   * @schema PrometheusSpecVolumesRbd#image
   */
  readonly image: string;

  /**
   * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   *
   * @default etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   * @schema PrometheusSpecVolumesRbd#keyring
   */
  readonly keyring?: string;

  /**
   * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   *
   * @schema PrometheusSpecVolumesRbd#monitors
   */
  readonly monitors: string[];

  /**
   * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   *
   * @default rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   * @schema PrometheusSpecVolumesRbd#pool
   */
  readonly pool?: string;

  /**
   * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   *
   * @default false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   * @schema PrometheusSpecVolumesRbd#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   *
   * @default nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   * @schema PrometheusSpecVolumesRbd#secretRef
   */
  readonly secretRef?: PrometheusSpecVolumesRbdSecretRef;

  /**
   * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   *
   * @default admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   * @schema PrometheusSpecVolumesRbd#user
   */
  readonly user?: string;

}

/**
 * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
 *
 * @schema PrometheusSpecVolumesScaleIo
 */
export interface PrometheusSpecVolumesScaleIo {
  /**
   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
   *
   * @default xfs".
   * @schema PrometheusSpecVolumesScaleIo#fsType
   */
  readonly fsType?: string;

  /**
   * The host address of the ScaleIO API Gateway.
   *
   * @schema PrometheusSpecVolumesScaleIo#gateway
   */
  readonly gateway: string;

  /**
   * The name of the ScaleIO Protection Domain for the configured storage.
   *
   * @schema PrometheusSpecVolumesScaleIo#protectionDomain
   */
  readonly protectionDomain?: string;

  /**
   * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   *
   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   * @schema PrometheusSpecVolumesScaleIo#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
   *
   * @schema PrometheusSpecVolumesScaleIo#secretRef
   */
  readonly secretRef: PrometheusSpecVolumesScaleIoSecretRef;

  /**
   * Flag to enable/disable SSL communication with Gateway, default false
   *
   * @schema PrometheusSpecVolumesScaleIo#sslEnabled
   */
  readonly sslEnabled?: boolean;

  /**
   * Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
   *
   * @default ThinProvisioned.
   * @schema PrometheusSpecVolumesScaleIo#storageMode
   */
  readonly storageMode?: string;

  /**
   * The ScaleIO Storage Pool associated with the protection domain.
   *
   * @schema PrometheusSpecVolumesScaleIo#storagePool
   */
  readonly storagePool?: string;

  /**
   * The name of the storage system as configured in ScaleIO.
   *
   * @schema PrometheusSpecVolumesScaleIo#system
   */
  readonly system: string;

  /**
   * The name of a volume already created in the ScaleIO system that is associated with this volume source.
   *
   * @schema PrometheusSpecVolumesScaleIo#volumeName
   */
  readonly volumeName?: string;

}

/**
 * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
 *
 * @schema PrometheusSpecVolumesSecret
 */
export interface PrometheusSpecVolumesSecret {
  /**
   * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   *
   * @default 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   * @schema PrometheusSpecVolumesSecret#defaultMode
   */
  readonly defaultMode?: number;

  /**
   * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
   *
   * @schema PrometheusSpecVolumesSecret#items
   */
  readonly items?: PrometheusSpecVolumesSecretItems[];

  /**
   * Specify whether the Secret or its keys must be defined
   *
   * @schema PrometheusSpecVolumesSecret#optional
   */
  readonly optional?: boolean;

  /**
   * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
   *
   * @schema PrometheusSpecVolumesSecret#secretName
   */
  readonly secretName?: string;

}

/**
 * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
 *
 * @schema PrometheusSpecVolumesStorageos
 */
export interface PrometheusSpecVolumesStorageos {
  /**
   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
   *
   * @schema PrometheusSpecVolumesStorageos#fsType
   */
  readonly fsType?: string;

  /**
   * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   *
   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   * @schema PrometheusSpecVolumesStorageos#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
   *
   * @schema PrometheusSpecVolumesStorageos#secretRef
   */
  readonly secretRef?: PrometheusSpecVolumesStorageosSecretRef;

  /**
   * VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
   *
   * @schema PrometheusSpecVolumesStorageos#volumeName
   */
  readonly volumeName?: string;

  /**
   * VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
   *
   * @schema PrometheusSpecVolumesStorageos#volumeNamespace
   */
  readonly volumeNamespace?: string;

}

/**
 * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
 *
 * @schema PrometheusSpecVolumesVsphereVolume
 */
export interface PrometheusSpecVolumesVsphereVolume {
  /**
   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
   *
   * @schema PrometheusSpecVolumesVsphereVolume#fsType
   */
  readonly fsType?: string;

  /**
   * Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
   *
   * @schema PrometheusSpecVolumesVsphereVolume#storagePolicyID
   */
  readonly storagePolicyID?: string;

  /**
   * Storage Policy Based Management (SPBM) profile name.
   *
   * @schema PrometheusSpecVolumesVsphereVolume#storagePolicyName
   */
  readonly storagePolicyName?: string;

  /**
   * Path that identifies vSphere volume vmdk
   *
   * @schema PrometheusSpecVolumesVsphereVolume#volumePath
   */
  readonly volumePath: string;

}

/**
 * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
 *
 * @schema PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * A node selector term, associated with the corresponding weight.
   *
   * @schema PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#preference
   */
  readonly preference: PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;

  /**
   * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
   *
   * @schema PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight: number;

}

/**
 * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
 *
 * @schema PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * Required. A list of node selector terms. The terms are ORed.
   *
   * @schema PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution#nodeSelectorTerms
   */
  readonly nodeSelectorTerms: PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];

}

/**
 * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
 *
 * @schema PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * Required. A pod affinity term, associated with the corresponding weight.
   *
   * @schema PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution#podAffinityTerm
   */
  readonly podAffinityTerm: PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;

  /**
   * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
   *
   * @schema PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight: number;

}

/**
 * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
 *
 * @schema PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * A label query over a set of resources, in this case pods.
   *
   * @schema PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#labelSelector
   */
  readonly labelSelector?: PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;

  /**
   * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
   *
   * @schema PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaces
   */
  readonly namespaces?: string[];

  /**
   * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
   *
   * @schema PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#topologyKey
   */
  readonly topologyKey: string;

}

/**
 * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
 *
 * @schema PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * Required. A pod affinity term, associated with the corresponding weight.
   *
   * @schema PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution#podAffinityTerm
   */
  readonly podAffinityTerm: PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;

  /**
   * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
   *
   * @schema PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight: number;

}

/**
 * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
 *
 * @schema PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * A label query over a set of resources, in this case pods.
   *
   * @schema PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#labelSelector
   */
  readonly labelSelector?: PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;

  /**
   * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
   *
   * @schema PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaces
   */
  readonly namespaces?: string[];

  /**
   * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
   *
   * @schema PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#topologyKey
   */
  readonly topologyKey: string;

}

/**
 * Port the Alertmanager API is exposed on.
 *
 * @schema PrometheusSpecAlertingAlertmanagersPort
 */
export class PrometheusSpecAlertingAlertmanagersPort {
  public static fromNumber(value: number): PrometheusSpecAlertingAlertmanagersPort {
    return new PrometheusSpecAlertingAlertmanagersPort(value);
  }
  public static fromString(value: string): PrometheusSpecAlertingAlertmanagersPort {
    return new PrometheusSpecAlertingAlertmanagersPort(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * TLS Config to use for alertmanager connection.
 *
 * @schema PrometheusSpecAlertingAlertmanagersTlsConfig
 */
export interface PrometheusSpecAlertingAlertmanagersTlsConfig {
  /**
   * Stuct containing the CA cert to use for the targets.
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfig#ca
   */
  readonly ca?: PrometheusSpecAlertingAlertmanagersTlsConfigCa;

  /**
   * Path to the CA cert in the Prometheus container to use for the targets.
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfig#caFile
   */
  readonly caFile?: string;

  /**
   * Struct containing the client cert file for the targets.
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfig#cert
   */
  readonly cert?: PrometheusSpecAlertingAlertmanagersTlsConfigCert;

  /**
   * Path to the client cert file in the Prometheus container for the targets.
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfig#certFile
   */
  readonly certFile?: string;

  /**
   * Disable target certificate validation.
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfig#insecureSkipVerify
   */
  readonly insecureSkipVerify?: boolean;

  /**
   * Path to the client key file in the Prometheus container for the targets.
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfig#keyFile
   */
  readonly keyFile?: string;

  /**
   * Secret containing the client key file for the targets.
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfig#keySecret
   */
  readonly keySecret?: PrometheusSpecAlertingAlertmanagersTlsConfigKeySecret;

  /**
   * Used to verify the hostname for the targets.
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfig#serverName
   */
  readonly serverName?: string;

}

/**
 * The secret in the service monitor namespace that contains the password for authentication.
 *
 * @schema PrometheusSpecApiserverConfigBasicAuthPassword
 */
export interface PrometheusSpecApiserverConfigBasicAuthPassword {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecApiserverConfigBasicAuthPassword#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecApiserverConfigBasicAuthPassword#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecApiserverConfigBasicAuthPassword#optional
   */
  readonly optional?: boolean;

}

/**
 * The secret in the service monitor namespace that contains the username for authentication.
 *
 * @schema PrometheusSpecApiserverConfigBasicAuthUsername
 */
export interface PrometheusSpecApiserverConfigBasicAuthUsername {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecApiserverConfigBasicAuthUsername#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecApiserverConfigBasicAuthUsername#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecApiserverConfigBasicAuthUsername#optional
   */
  readonly optional?: boolean;

}

/**
 * Stuct containing the CA cert to use for the targets.
 *
 * @schema PrometheusSpecApiserverConfigTlsConfigCa
 */
export interface PrometheusSpecApiserverConfigTlsConfigCa {
  /**
   * ConfigMap containing data to use for the targets.
   *
   * @schema PrometheusSpecApiserverConfigTlsConfigCa#configMap
   */
  readonly configMap?: PrometheusSpecApiserverConfigTlsConfigCaConfigMap;

  /**
   * Secret containing data to use for the targets.
   *
   * @schema PrometheusSpecApiserverConfigTlsConfigCa#secret
   */
  readonly secret?: PrometheusSpecApiserverConfigTlsConfigCaSecret;

}

/**
 * Struct containing the client cert file for the targets.
 *
 * @schema PrometheusSpecApiserverConfigTlsConfigCert
 */
export interface PrometheusSpecApiserverConfigTlsConfigCert {
  /**
   * ConfigMap containing data to use for the targets.
   *
   * @schema PrometheusSpecApiserverConfigTlsConfigCert#configMap
   */
  readonly configMap?: PrometheusSpecApiserverConfigTlsConfigCertConfigMap;

  /**
   * Secret containing data to use for the targets.
   *
   * @schema PrometheusSpecApiserverConfigTlsConfigCert#secret
   */
  readonly secret?: PrometheusSpecApiserverConfigTlsConfigCertSecret;

}

/**
 * Secret containing the client key file for the targets.
 *
 * @schema PrometheusSpecApiserverConfigTlsConfigKeySecret
 */
export interface PrometheusSpecApiserverConfigTlsConfigKeySecret {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecApiserverConfigTlsConfigKeySecret#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecApiserverConfigTlsConfigKeySecret#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecApiserverConfigTlsConfigKeySecret#optional
   */
  readonly optional?: boolean;

}

/**
 * Source for the environment variable's value. Cannot be used if value is not empty.
 *
 * @schema PrometheusSpecContainersEnvValueFrom
 */
export interface PrometheusSpecContainersEnvValueFrom {
  /**
   * Selects a key of a ConfigMap.
   *
   * @schema PrometheusSpecContainersEnvValueFrom#configMapKeyRef
   */
  readonly configMapKeyRef?: PrometheusSpecContainersEnvValueFromConfigMapKeyRef;

  /**
   * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
   *
   * @schema PrometheusSpecContainersEnvValueFrom#fieldRef
   */
  readonly fieldRef?: PrometheusSpecContainersEnvValueFromFieldRef;

  /**
   * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
   *
   * @schema PrometheusSpecContainersEnvValueFrom#resourceFieldRef
   */
  readonly resourceFieldRef?: PrometheusSpecContainersEnvValueFromResourceFieldRef;

  /**
   * Selects a key of a secret in the pod's namespace
   *
   * @schema PrometheusSpecContainersEnvValueFrom#secretKeyRef
   */
  readonly secretKeyRef?: PrometheusSpecContainersEnvValueFromSecretKeyRef;

}

/**
 * The ConfigMap to select from
 *
 * @schema PrometheusSpecContainersEnvFromConfigMapRef
 */
export interface PrometheusSpecContainersEnvFromConfigMapRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecContainersEnvFromConfigMapRef#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap must be defined
   *
   * @schema PrometheusSpecContainersEnvFromConfigMapRef#optional
   */
  readonly optional?: boolean;

}

/**
 * The Secret to select from
 *
 * @schema PrometheusSpecContainersEnvFromSecretRef
 */
export interface PrometheusSpecContainersEnvFromSecretRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecContainersEnvFromSecretRef#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret must be defined
   *
   * @schema PrometheusSpecContainersEnvFromSecretRef#optional
   */
  readonly optional?: boolean;

}

/**
 * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
 *
 * @schema PrometheusSpecContainersLifecyclePostStart
 */
export interface PrometheusSpecContainersLifecyclePostStart {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PrometheusSpecContainersLifecyclePostStart#exec
   */
  readonly exec?: PrometheusSpecContainersLifecyclePostStartExec;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PrometheusSpecContainersLifecyclePostStart#httpGet
   */
  readonly httpGet?: PrometheusSpecContainersLifecyclePostStartHttpGet;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PrometheusSpecContainersLifecyclePostStart#tcpSocket
   */
  readonly tcpSocket?: PrometheusSpecContainersLifecyclePostStartTcpSocket;

}

/**
 * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
 *
 * @schema PrometheusSpecContainersLifecyclePreStop
 */
export interface PrometheusSpecContainersLifecyclePreStop {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PrometheusSpecContainersLifecyclePreStop#exec
   */
  readonly exec?: PrometheusSpecContainersLifecyclePreStopExec;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PrometheusSpecContainersLifecyclePreStop#httpGet
   */
  readonly httpGet?: PrometheusSpecContainersLifecyclePreStopHttpGet;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PrometheusSpecContainersLifecyclePreStop#tcpSocket
   */
  readonly tcpSocket?: PrometheusSpecContainersLifecyclePreStopTcpSocket;

}

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PrometheusSpecContainersLivenessProbeExec
 */
export interface PrometheusSpecContainersLivenessProbeExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PrometheusSpecContainersLivenessProbeExec#command
   */
  readonly command?: string[];

}

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PrometheusSpecContainersLivenessProbeHttpGet
 */
export interface PrometheusSpecContainersLivenessProbeHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PrometheusSpecContainersLivenessProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PrometheusSpecContainersLivenessProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: PrometheusSpecContainersLivenessProbeHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PrometheusSpecContainersLivenessProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PrometheusSpecContainersLivenessProbeHttpGet#port
   */
  readonly port: PrometheusSpecContainersLivenessProbeHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PrometheusSpecContainersLivenessProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PrometheusSpecContainersLivenessProbeTcpSocket
 */
export interface PrometheusSpecContainersLivenessProbeTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PrometheusSpecContainersLivenessProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PrometheusSpecContainersLivenessProbeTcpSocket#port
   */
  readonly port: PrometheusSpecContainersLivenessProbeTcpSocketPort;

}

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PrometheusSpecContainersReadinessProbeExec
 */
export interface PrometheusSpecContainersReadinessProbeExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PrometheusSpecContainersReadinessProbeExec#command
   */
  readonly command?: string[];

}

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PrometheusSpecContainersReadinessProbeHttpGet
 */
export interface PrometheusSpecContainersReadinessProbeHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PrometheusSpecContainersReadinessProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PrometheusSpecContainersReadinessProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: PrometheusSpecContainersReadinessProbeHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PrometheusSpecContainersReadinessProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PrometheusSpecContainersReadinessProbeHttpGet#port
   */
  readonly port: PrometheusSpecContainersReadinessProbeHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PrometheusSpecContainersReadinessProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PrometheusSpecContainersReadinessProbeTcpSocket
 */
export interface PrometheusSpecContainersReadinessProbeTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PrometheusSpecContainersReadinessProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PrometheusSpecContainersReadinessProbeTcpSocket#port
   */
  readonly port: PrometheusSpecContainersReadinessProbeTcpSocketPort;

}

/**
 * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
 *
 * @default the default set of capabilities granted by the container runtime.
 * @schema PrometheusSpecContainersSecurityContextCapabilities
 */
export interface PrometheusSpecContainersSecurityContextCapabilities {
  /**
   * Added capabilities
   *
   * @schema PrometheusSpecContainersSecurityContextCapabilities#add
   */
  readonly add?: string[];

  /**
   * Removed capabilities
   *
   * @schema PrometheusSpecContainersSecurityContextCapabilities#drop
   */
  readonly drop?: string[];

}

/**
 * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
 *
 * @schema PrometheusSpecContainersSecurityContextSeLinuxOptions
 */
export interface PrometheusSpecContainersSecurityContextSeLinuxOptions {
  /**
   * Level is SELinux level label that applies to the container.
   *
   * @schema PrometheusSpecContainersSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * Role is a SELinux role label that applies to the container.
   *
   * @schema PrometheusSpecContainersSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * Type is a SELinux type label that applies to the container.
   *
   * @schema PrometheusSpecContainersSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * User is a SELinux user label that applies to the container.
   *
   * @schema PrometheusSpecContainersSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;

}

/**
 * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
 *
 * @schema PrometheusSpecContainersSecurityContextWindowsOptions
 */
export interface PrometheusSpecContainersSecurityContextWindowsOptions {
  /**
   * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
   *
   * @schema PrometheusSpecContainersSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * GMSACredentialSpecName is the name of the GMSA credential spec to use.
   *
   * @schema PrometheusSpecContainersSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

  /**
   * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @default the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   * @schema PrometheusSpecContainersSecurityContextWindowsOptions#runAsUserName
   */
  readonly runAsUserName?: string;

}

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PrometheusSpecContainersStartupProbeExec
 */
export interface PrometheusSpecContainersStartupProbeExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PrometheusSpecContainersStartupProbeExec#command
   */
  readonly command?: string[];

}

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PrometheusSpecContainersStartupProbeHttpGet
 */
export interface PrometheusSpecContainersStartupProbeHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PrometheusSpecContainersStartupProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PrometheusSpecContainersStartupProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: PrometheusSpecContainersStartupProbeHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PrometheusSpecContainersStartupProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PrometheusSpecContainersStartupProbeHttpGet#port
   */
  readonly port: PrometheusSpecContainersStartupProbeHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PrometheusSpecContainersStartupProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PrometheusSpecContainersStartupProbeTcpSocket
 */
export interface PrometheusSpecContainersStartupProbeTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PrometheusSpecContainersStartupProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PrometheusSpecContainersStartupProbeTcpSocket#port
   */
  readonly port: PrometheusSpecContainersStartupProbeTcpSocketPort;

}

/**
 * Source for the environment variable's value. Cannot be used if value is not empty.
 *
 * @schema PrometheusSpecInitContainersEnvValueFrom
 */
export interface PrometheusSpecInitContainersEnvValueFrom {
  /**
   * Selects a key of a ConfigMap.
   *
   * @schema PrometheusSpecInitContainersEnvValueFrom#configMapKeyRef
   */
  readonly configMapKeyRef?: PrometheusSpecInitContainersEnvValueFromConfigMapKeyRef;

  /**
   * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
   *
   * @schema PrometheusSpecInitContainersEnvValueFrom#fieldRef
   */
  readonly fieldRef?: PrometheusSpecInitContainersEnvValueFromFieldRef;

  /**
   * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
   *
   * @schema PrometheusSpecInitContainersEnvValueFrom#resourceFieldRef
   */
  readonly resourceFieldRef?: PrometheusSpecInitContainersEnvValueFromResourceFieldRef;

  /**
   * Selects a key of a secret in the pod's namespace
   *
   * @schema PrometheusSpecInitContainersEnvValueFrom#secretKeyRef
   */
  readonly secretKeyRef?: PrometheusSpecInitContainersEnvValueFromSecretKeyRef;

}

/**
 * The ConfigMap to select from
 *
 * @schema PrometheusSpecInitContainersEnvFromConfigMapRef
 */
export interface PrometheusSpecInitContainersEnvFromConfigMapRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecInitContainersEnvFromConfigMapRef#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap must be defined
   *
   * @schema PrometheusSpecInitContainersEnvFromConfigMapRef#optional
   */
  readonly optional?: boolean;

}

/**
 * The Secret to select from
 *
 * @schema PrometheusSpecInitContainersEnvFromSecretRef
 */
export interface PrometheusSpecInitContainersEnvFromSecretRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecInitContainersEnvFromSecretRef#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret must be defined
   *
   * @schema PrometheusSpecInitContainersEnvFromSecretRef#optional
   */
  readonly optional?: boolean;

}

/**
 * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
 *
 * @schema PrometheusSpecInitContainersLifecyclePostStart
 */
export interface PrometheusSpecInitContainersLifecyclePostStart {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PrometheusSpecInitContainersLifecyclePostStart#exec
   */
  readonly exec?: PrometheusSpecInitContainersLifecyclePostStartExec;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PrometheusSpecInitContainersLifecyclePostStart#httpGet
   */
  readonly httpGet?: PrometheusSpecInitContainersLifecyclePostStartHttpGet;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PrometheusSpecInitContainersLifecyclePostStart#tcpSocket
   */
  readonly tcpSocket?: PrometheusSpecInitContainersLifecyclePostStartTcpSocket;

}

/**
 * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
 *
 * @schema PrometheusSpecInitContainersLifecyclePreStop
 */
export interface PrometheusSpecInitContainersLifecyclePreStop {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PrometheusSpecInitContainersLifecyclePreStop#exec
   */
  readonly exec?: PrometheusSpecInitContainersLifecyclePreStopExec;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PrometheusSpecInitContainersLifecyclePreStop#httpGet
   */
  readonly httpGet?: PrometheusSpecInitContainersLifecyclePreStopHttpGet;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PrometheusSpecInitContainersLifecyclePreStop#tcpSocket
   */
  readonly tcpSocket?: PrometheusSpecInitContainersLifecyclePreStopTcpSocket;

}

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PrometheusSpecInitContainersLivenessProbeExec
 */
export interface PrometheusSpecInitContainersLivenessProbeExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PrometheusSpecInitContainersLivenessProbeExec#command
   */
  readonly command?: string[];

}

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PrometheusSpecInitContainersLivenessProbeHttpGet
 */
export interface PrometheusSpecInitContainersLivenessProbeHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PrometheusSpecInitContainersLivenessProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PrometheusSpecInitContainersLivenessProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: PrometheusSpecInitContainersLivenessProbeHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PrometheusSpecInitContainersLivenessProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PrometheusSpecInitContainersLivenessProbeHttpGet#port
   */
  readonly port: PrometheusSpecInitContainersLivenessProbeHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PrometheusSpecInitContainersLivenessProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PrometheusSpecInitContainersLivenessProbeTcpSocket
 */
export interface PrometheusSpecInitContainersLivenessProbeTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PrometheusSpecInitContainersLivenessProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PrometheusSpecInitContainersLivenessProbeTcpSocket#port
   */
  readonly port: PrometheusSpecInitContainersLivenessProbeTcpSocketPort;

}

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PrometheusSpecInitContainersReadinessProbeExec
 */
export interface PrometheusSpecInitContainersReadinessProbeExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PrometheusSpecInitContainersReadinessProbeExec#command
   */
  readonly command?: string[];

}

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PrometheusSpecInitContainersReadinessProbeHttpGet
 */
export interface PrometheusSpecInitContainersReadinessProbeHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PrometheusSpecInitContainersReadinessProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PrometheusSpecInitContainersReadinessProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: PrometheusSpecInitContainersReadinessProbeHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PrometheusSpecInitContainersReadinessProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PrometheusSpecInitContainersReadinessProbeHttpGet#port
   */
  readonly port: PrometheusSpecInitContainersReadinessProbeHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PrometheusSpecInitContainersReadinessProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PrometheusSpecInitContainersReadinessProbeTcpSocket
 */
export interface PrometheusSpecInitContainersReadinessProbeTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PrometheusSpecInitContainersReadinessProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PrometheusSpecInitContainersReadinessProbeTcpSocket#port
   */
  readonly port: PrometheusSpecInitContainersReadinessProbeTcpSocketPort;

}

/**
 * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
 *
 * @default the default set of capabilities granted by the container runtime.
 * @schema PrometheusSpecInitContainersSecurityContextCapabilities
 */
export interface PrometheusSpecInitContainersSecurityContextCapabilities {
  /**
   * Added capabilities
   *
   * @schema PrometheusSpecInitContainersSecurityContextCapabilities#add
   */
  readonly add?: string[];

  /**
   * Removed capabilities
   *
   * @schema PrometheusSpecInitContainersSecurityContextCapabilities#drop
   */
  readonly drop?: string[];

}

/**
 * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
 *
 * @schema PrometheusSpecInitContainersSecurityContextSeLinuxOptions
 */
export interface PrometheusSpecInitContainersSecurityContextSeLinuxOptions {
  /**
   * Level is SELinux level label that applies to the container.
   *
   * @schema PrometheusSpecInitContainersSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * Role is a SELinux role label that applies to the container.
   *
   * @schema PrometheusSpecInitContainersSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * Type is a SELinux type label that applies to the container.
   *
   * @schema PrometheusSpecInitContainersSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * User is a SELinux user label that applies to the container.
   *
   * @schema PrometheusSpecInitContainersSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;

}

/**
 * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
 *
 * @schema PrometheusSpecInitContainersSecurityContextWindowsOptions
 */
export interface PrometheusSpecInitContainersSecurityContextWindowsOptions {
  /**
   * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
   *
   * @schema PrometheusSpecInitContainersSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * GMSACredentialSpecName is the name of the GMSA credential spec to use.
   *
   * @schema PrometheusSpecInitContainersSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

  /**
   * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @default the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   * @schema PrometheusSpecInitContainersSecurityContextWindowsOptions#runAsUserName
   */
  readonly runAsUserName?: string;

}

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PrometheusSpecInitContainersStartupProbeExec
 */
export interface PrometheusSpecInitContainersStartupProbeExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PrometheusSpecInitContainersStartupProbeExec#command
   */
  readonly command?: string[];

}

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PrometheusSpecInitContainersStartupProbeHttpGet
 */
export interface PrometheusSpecInitContainersStartupProbeHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PrometheusSpecInitContainersStartupProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PrometheusSpecInitContainersStartupProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: PrometheusSpecInitContainersStartupProbeHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PrometheusSpecInitContainersStartupProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PrometheusSpecInitContainersStartupProbeHttpGet#port
   */
  readonly port: PrometheusSpecInitContainersStartupProbeHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PrometheusSpecInitContainersStartupProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PrometheusSpecInitContainersStartupProbeTcpSocket
 */
export interface PrometheusSpecInitContainersStartupProbeTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PrometheusSpecInitContainersStartupProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PrometheusSpecInitContainersStartupProbeTcpSocket#port
   */
  readonly port: PrometheusSpecInitContainersStartupProbeTcpSocketPort;

}

/**
 * The secret in the service monitor namespace that contains the password for authentication.
 *
 * @schema PrometheusSpecRemoteReadBasicAuthPassword
 */
export interface PrometheusSpecRemoteReadBasicAuthPassword {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecRemoteReadBasicAuthPassword#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecRemoteReadBasicAuthPassword#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecRemoteReadBasicAuthPassword#optional
   */
  readonly optional?: boolean;

}

/**
 * The secret in the service monitor namespace that contains the username for authentication.
 *
 * @schema PrometheusSpecRemoteReadBasicAuthUsername
 */
export interface PrometheusSpecRemoteReadBasicAuthUsername {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecRemoteReadBasicAuthUsername#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecRemoteReadBasicAuthUsername#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecRemoteReadBasicAuthUsername#optional
   */
  readonly optional?: boolean;

}

/**
 * Stuct containing the CA cert to use for the targets.
 *
 * @schema PrometheusSpecRemoteReadTlsConfigCa
 */
export interface PrometheusSpecRemoteReadTlsConfigCa {
  /**
   * ConfigMap containing data to use for the targets.
   *
   * @schema PrometheusSpecRemoteReadTlsConfigCa#configMap
   */
  readonly configMap?: PrometheusSpecRemoteReadTlsConfigCaConfigMap;

  /**
   * Secret containing data to use for the targets.
   *
   * @schema PrometheusSpecRemoteReadTlsConfigCa#secret
   */
  readonly secret?: PrometheusSpecRemoteReadTlsConfigCaSecret;

}

/**
 * Struct containing the client cert file for the targets.
 *
 * @schema PrometheusSpecRemoteReadTlsConfigCert
 */
export interface PrometheusSpecRemoteReadTlsConfigCert {
  /**
   * ConfigMap containing data to use for the targets.
   *
   * @schema PrometheusSpecRemoteReadTlsConfigCert#configMap
   */
  readonly configMap?: PrometheusSpecRemoteReadTlsConfigCertConfigMap;

  /**
   * Secret containing data to use for the targets.
   *
   * @schema PrometheusSpecRemoteReadTlsConfigCert#secret
   */
  readonly secret?: PrometheusSpecRemoteReadTlsConfigCertSecret;

}

/**
 * Secret containing the client key file for the targets.
 *
 * @schema PrometheusSpecRemoteReadTlsConfigKeySecret
 */
export interface PrometheusSpecRemoteReadTlsConfigKeySecret {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecRemoteReadTlsConfigKeySecret#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecRemoteReadTlsConfigKeySecret#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecRemoteReadTlsConfigKeySecret#optional
   */
  readonly optional?: boolean;

}

/**
 * The secret in the service monitor namespace that contains the password for authentication.
 *
 * @schema PrometheusSpecRemoteWriteBasicAuthPassword
 */
export interface PrometheusSpecRemoteWriteBasicAuthPassword {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecRemoteWriteBasicAuthPassword#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecRemoteWriteBasicAuthPassword#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecRemoteWriteBasicAuthPassword#optional
   */
  readonly optional?: boolean;

}

/**
 * The secret in the service monitor namespace that contains the username for authentication.
 *
 * @schema PrometheusSpecRemoteWriteBasicAuthUsername
 */
export interface PrometheusSpecRemoteWriteBasicAuthUsername {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecRemoteWriteBasicAuthUsername#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecRemoteWriteBasicAuthUsername#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecRemoteWriteBasicAuthUsername#optional
   */
  readonly optional?: boolean;

}

/**
 * Stuct containing the CA cert to use for the targets.
 *
 * @schema PrometheusSpecRemoteWriteTlsConfigCa
 */
export interface PrometheusSpecRemoteWriteTlsConfigCa {
  /**
   * ConfigMap containing data to use for the targets.
   *
   * @schema PrometheusSpecRemoteWriteTlsConfigCa#configMap
   */
  readonly configMap?: PrometheusSpecRemoteWriteTlsConfigCaConfigMap;

  /**
   * Secret containing data to use for the targets.
   *
   * @schema PrometheusSpecRemoteWriteTlsConfigCa#secret
   */
  readonly secret?: PrometheusSpecRemoteWriteTlsConfigCaSecret;

}

/**
 * Struct containing the client cert file for the targets.
 *
 * @schema PrometheusSpecRemoteWriteTlsConfigCert
 */
export interface PrometheusSpecRemoteWriteTlsConfigCert {
  /**
   * ConfigMap containing data to use for the targets.
   *
   * @schema PrometheusSpecRemoteWriteTlsConfigCert#configMap
   */
  readonly configMap?: PrometheusSpecRemoteWriteTlsConfigCertConfigMap;

  /**
   * Secret containing data to use for the targets.
   *
   * @schema PrometheusSpecRemoteWriteTlsConfigCert#secret
   */
  readonly secret?: PrometheusSpecRemoteWriteTlsConfigCertSecret;

}

/**
 * Secret containing the client key file for the targets.
 *
 * @schema PrometheusSpecRemoteWriteTlsConfigKeySecret
 */
export interface PrometheusSpecRemoteWriteTlsConfigKeySecret {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecRemoteWriteTlsConfigKeySecret#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecRemoteWriteTlsConfigKeySecret#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecRemoteWriteTlsConfigKeySecret#optional
   */
  readonly optional?: boolean;

}

/**
 * EmbeddedMetadata contains metadata relevant to an EmbeddedResource.
 *
 * @schema PrometheusSpecStorageVolumeClaimTemplateMetadata
 */
export interface PrometheusSpecStorageVolumeClaimTemplateMetadata {
  /**
   * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateMetadata#name
   */
  readonly name?: string;

}

/**
 * Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
 *
 * @schema PrometheusSpecStorageVolumeClaimTemplateSpec
 */
export interface PrometheusSpecStorageVolumeClaimTemplateSpec {
  /**
   * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateSpec#accessModes
   */
  readonly accessModes?: string[];

  /**
   * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateSpec#dataSource
   */
  readonly dataSource?: PrometheusSpecStorageVolumeClaimTemplateSpecDataSource;

  /**
   * Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateSpec#resources
   */
  readonly resources?: PrometheusSpecStorageVolumeClaimTemplateSpecResources;

  /**
   * A label query over volumes to consider for binding.
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateSpec#selector
   */
  readonly selector?: PrometheusSpecStorageVolumeClaimTemplateSpecSelector;

  /**
   * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateSpec#storageClassName
   */
  readonly storageClassName?: string;

  /**
   * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateSpec#volumeMode
   */
  readonly volumeMode?: string;

  /**
   * VolumeName is the binding reference to the PersistentVolume backing this claim.
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateSpec#volumeName
   */
  readonly volumeName?: string;

}

/**
 * Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
 *
 * @schema PrometheusSpecStorageVolumeClaimTemplateStatus
 */
export interface PrometheusSpecStorageVolumeClaimTemplateStatus {
  /**
   * AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateStatus#accessModes
   */
  readonly accessModes?: string[];

  /**
   * Represents the actual resources of the underlying volume.
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateStatus#capacity
   */
  readonly capacity?: { [key: string]: string };

  /**
   * Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateStatus#conditions
   */
  readonly conditions?: PrometheusSpecStorageVolumeClaimTemplateStatusConditions[];

  /**
   * Phase represents the current phase of PersistentVolumeClaim.
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateStatus#phase
   */
  readonly phase?: string;

}

/**
 * Stuct containing the CA cert to use for the targets.
 *
 * @schema PrometheusSpecThanosGrpcServerTlsConfigCa
 */
export interface PrometheusSpecThanosGrpcServerTlsConfigCa {
  /**
   * ConfigMap containing data to use for the targets.
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfigCa#configMap
   */
  readonly configMap?: PrometheusSpecThanosGrpcServerTlsConfigCaConfigMap;

  /**
   * Secret containing data to use for the targets.
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfigCa#secret
   */
  readonly secret?: PrometheusSpecThanosGrpcServerTlsConfigCaSecret;

}

/**
 * Struct containing the client cert file for the targets.
 *
 * @schema PrometheusSpecThanosGrpcServerTlsConfigCert
 */
export interface PrometheusSpecThanosGrpcServerTlsConfigCert {
  /**
   * ConfigMap containing data to use for the targets.
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfigCert#configMap
   */
  readonly configMap?: PrometheusSpecThanosGrpcServerTlsConfigCertConfigMap;

  /**
   * Secret containing data to use for the targets.
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfigCert#secret
   */
  readonly secret?: PrometheusSpecThanosGrpcServerTlsConfigCertSecret;

}

/**
 * Secret containing the client key file for the targets.
 *
 * @schema PrometheusSpecThanosGrpcServerTlsConfigKeySecret
 */
export interface PrometheusSpecThanosGrpcServerTlsConfigKeySecret {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfigKeySecret#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfigKeySecret#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfigKeySecret#optional
   */
  readonly optional?: boolean;

}

/**
 * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
 *
 * @schema PrometheusSpecVolumesCephfsSecretRef
 */
export interface PrometheusSpecVolumesCephfsSecretRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecVolumesCephfsSecretRef#name
   */
  readonly name?: string;

}

/**
 * Optional: points to a secret object containing parameters used to connect to OpenStack.
 *
 * @schema PrometheusSpecVolumesCinderSecretRef
 */
export interface PrometheusSpecVolumesCinderSecretRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecVolumesCinderSecretRef#name
   */
  readonly name?: string;

}

/**
 * Maps a string key to a path within a volume.
 *
 * @schema PrometheusSpecVolumesConfigMapItems
 */
export interface PrometheusSpecVolumesConfigMapItems {
  /**
   * The key to project.
   *
   * @schema PrometheusSpecVolumesConfigMapItems#key
   */
  readonly key: string;

  /**
   * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   *
   * @schema PrometheusSpecVolumesConfigMapItems#mode
   */
  readonly mode?: number;

  /**
   * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
   *
   * @schema PrometheusSpecVolumesConfigMapItems#path
   */
  readonly path: string;

}

/**
 * NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
 *
 * @schema PrometheusSpecVolumesCsiNodePublishSecretRef
 */
export interface PrometheusSpecVolumesCsiNodePublishSecretRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecVolumesCsiNodePublishSecretRef#name
   */
  readonly name?: string;

}

/**
 * DownwardAPIVolumeFile represents information to create the file containing the pod field
 *
 * @schema PrometheusSpecVolumesDownwardApiItems
 */
export interface PrometheusSpecVolumesDownwardApiItems {
  /**
   * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
   *
   * @schema PrometheusSpecVolumesDownwardApiItems#fieldRef
   */
  readonly fieldRef?: PrometheusSpecVolumesDownwardApiItemsFieldRef;

  /**
   * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   *
   * @schema PrometheusSpecVolumesDownwardApiItems#mode
   */
  readonly mode?: number;

  /**
   * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
   *
   * @schema PrometheusSpecVolumesDownwardApiItems#path
   */
  readonly path: string;

  /**
   * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
   *
   * @schema PrometheusSpecVolumesDownwardApiItems#resourceFieldRef
   */
  readonly resourceFieldRef?: PrometheusSpecVolumesDownwardApiItemsResourceFieldRef;

}

/**
 * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
 *
 * @schema PrometheusSpecVolumesFlexVolumeSecretRef
 */
export interface PrometheusSpecVolumesFlexVolumeSecretRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecVolumesFlexVolumeSecretRef#name
   */
  readonly name?: string;

}

/**
 * CHAP Secret for iSCSI target and initiator authentication
 *
 * @schema PrometheusSpecVolumesIscsiSecretRef
 */
export interface PrometheusSpecVolumesIscsiSecretRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecVolumesIscsiSecretRef#name
   */
  readonly name?: string;

}

/**
 * Projection that may be projected along with other supported volume types
 *
 * @schema PrometheusSpecVolumesProjectedSources
 */
export interface PrometheusSpecVolumesProjectedSources {
  /**
   * information about the configMap data to project
   *
   * @schema PrometheusSpecVolumesProjectedSources#configMap
   */
  readonly configMap?: PrometheusSpecVolumesProjectedSourcesConfigMap;

  /**
   * information about the downwardAPI data to project
   *
   * @schema PrometheusSpecVolumesProjectedSources#downwardAPI
   */
  readonly downwardAPI?: PrometheusSpecVolumesProjectedSourcesDownwardApi;

  /**
   * information about the secret data to project
   *
   * @schema PrometheusSpecVolumesProjectedSources#secret
   */
  readonly secret?: PrometheusSpecVolumesProjectedSourcesSecret;

  /**
   * information about the serviceAccountToken data to project
   *
   * @schema PrometheusSpecVolumesProjectedSources#serviceAccountToken
   */
  readonly serviceAccountToken?: PrometheusSpecVolumesProjectedSourcesServiceAccountToken;

}

/**
 * SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
 *
 * @default nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
 * @schema PrometheusSpecVolumesRbdSecretRef
 */
export interface PrometheusSpecVolumesRbdSecretRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecVolumesRbdSecretRef#name
   */
  readonly name?: string;

}

/**
 * SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
 *
 * @schema PrometheusSpecVolumesScaleIoSecretRef
 */
export interface PrometheusSpecVolumesScaleIoSecretRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecVolumesScaleIoSecretRef#name
   */
  readonly name?: string;

}

/**
 * Maps a string key to a path within a volume.
 *
 * @schema PrometheusSpecVolumesSecretItems
 */
export interface PrometheusSpecVolumesSecretItems {
  /**
   * The key to project.
   *
   * @schema PrometheusSpecVolumesSecretItems#key
   */
  readonly key: string;

  /**
   * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   *
   * @schema PrometheusSpecVolumesSecretItems#mode
   */
  readonly mode?: number;

  /**
   * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
   *
   * @schema PrometheusSpecVolumesSecretItems#path
   */
  readonly path: string;

}

/**
 * SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
 *
 * @schema PrometheusSpecVolumesStorageosSecretRef
 */
export interface PrometheusSpecVolumesStorageosSecretRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecVolumesStorageosSecretRef#name
   */
  readonly name?: string;

}

/**
 * A node selector term, associated with the corresponding weight.
 *
 * @schema PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference
 */
export interface PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
  /**
   * A list of node selector requirements by node's labels.
   *
   * @schema PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchExpressions
   */
  readonly matchExpressions?: PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];

  /**
   * A list of node selector requirements by node's fields.
   *
   * @schema PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchFields
   */
  readonly matchFields?: PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];

}

/**
 * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
 *
 * @schema PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms
 */
export interface PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
  /**
   * A list of node selector requirements by node's labels.
   *
   * @schema PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchExpressions
   */
  readonly matchExpressions?: PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];

  /**
   * A list of node selector requirements by node's fields.
   *
   * @schema PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchFields
   */
  readonly matchFields?: PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];

}

/**
 * Required. A pod affinity term, associated with the corresponding weight.
 *
 * @schema PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
 */
export interface PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
  /**
   * A label query over a set of resources, in this case pods.
   *
   * @schema PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#labelSelector
   */
  readonly labelSelector?: PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;

  /**
   * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
   *
   * @schema PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaces
   */
  readonly namespaces?: string[];

  /**
   * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
   *
   * @schema PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#topologyKey
   */
  readonly topologyKey: string;

}

/**
 * A label query over a set of resources, in this case pods.
 *
 * @schema PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
 */
export interface PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchExpressions
   */
  readonly matchExpressions?: PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Required. A pod affinity term, associated with the corresponding weight.
 *
 * @schema PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
 */
export interface PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
  /**
   * A label query over a set of resources, in this case pods.
   *
   * @schema PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#labelSelector
   */
  readonly labelSelector?: PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;

  /**
   * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
   *
   * @schema PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaces
   */
  readonly namespaces?: string[];

  /**
   * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
   *
   * @schema PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#topologyKey
   */
  readonly topologyKey: string;

}

/**
 * A label query over a set of resources, in this case pods.
 *
 * @schema PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
 */
export interface PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchExpressions
   */
  readonly matchExpressions?: PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Stuct containing the CA cert to use for the targets.
 *
 * @schema PrometheusSpecAlertingAlertmanagersTlsConfigCa
 */
export interface PrometheusSpecAlertingAlertmanagersTlsConfigCa {
  /**
   * ConfigMap containing data to use for the targets.
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfigCa#configMap
   */
  readonly configMap?: PrometheusSpecAlertingAlertmanagersTlsConfigCaConfigMap;

  /**
   * Secret containing data to use for the targets.
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfigCa#secret
   */
  readonly secret?: PrometheusSpecAlertingAlertmanagersTlsConfigCaSecret;

}

/**
 * Struct containing the client cert file for the targets.
 *
 * @schema PrometheusSpecAlertingAlertmanagersTlsConfigCert
 */
export interface PrometheusSpecAlertingAlertmanagersTlsConfigCert {
  /**
   * ConfigMap containing data to use for the targets.
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfigCert#configMap
   */
  readonly configMap?: PrometheusSpecAlertingAlertmanagersTlsConfigCertConfigMap;

  /**
   * Secret containing data to use for the targets.
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfigCert#secret
   */
  readonly secret?: PrometheusSpecAlertingAlertmanagersTlsConfigCertSecret;

}

/**
 * Secret containing the client key file for the targets.
 *
 * @schema PrometheusSpecAlertingAlertmanagersTlsConfigKeySecret
 */
export interface PrometheusSpecAlertingAlertmanagersTlsConfigKeySecret {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfigKeySecret#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfigKeySecret#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfigKeySecret#optional
   */
  readonly optional?: boolean;

}

/**
 * ConfigMap containing data to use for the targets.
 *
 * @schema PrometheusSpecApiserverConfigTlsConfigCaConfigMap
 */
export interface PrometheusSpecApiserverConfigTlsConfigCaConfigMap {
  /**
   * The key to select.
   *
   * @schema PrometheusSpecApiserverConfigTlsConfigCaConfigMap#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecApiserverConfigTlsConfigCaConfigMap#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap or its key must be defined
   *
   * @schema PrometheusSpecApiserverConfigTlsConfigCaConfigMap#optional
   */
  readonly optional?: boolean;

}

/**
 * Secret containing data to use for the targets.
 *
 * @schema PrometheusSpecApiserverConfigTlsConfigCaSecret
 */
export interface PrometheusSpecApiserverConfigTlsConfigCaSecret {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecApiserverConfigTlsConfigCaSecret#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecApiserverConfigTlsConfigCaSecret#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecApiserverConfigTlsConfigCaSecret#optional
   */
  readonly optional?: boolean;

}

/**
 * ConfigMap containing data to use for the targets.
 *
 * @schema PrometheusSpecApiserverConfigTlsConfigCertConfigMap
 */
export interface PrometheusSpecApiserverConfigTlsConfigCertConfigMap {
  /**
   * The key to select.
   *
   * @schema PrometheusSpecApiserverConfigTlsConfigCertConfigMap#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecApiserverConfigTlsConfigCertConfigMap#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap or its key must be defined
   *
   * @schema PrometheusSpecApiserverConfigTlsConfigCertConfigMap#optional
   */
  readonly optional?: boolean;

}

/**
 * Secret containing data to use for the targets.
 *
 * @schema PrometheusSpecApiserverConfigTlsConfigCertSecret
 */
export interface PrometheusSpecApiserverConfigTlsConfigCertSecret {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecApiserverConfigTlsConfigCertSecret#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecApiserverConfigTlsConfigCertSecret#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecApiserverConfigTlsConfigCertSecret#optional
   */
  readonly optional?: boolean;

}

/**
 * Selects a key of a ConfigMap.
 *
 * @schema PrometheusSpecContainersEnvValueFromConfigMapKeyRef
 */
export interface PrometheusSpecContainersEnvValueFromConfigMapKeyRef {
  /**
   * The key to select.
   *
   * @schema PrometheusSpecContainersEnvValueFromConfigMapKeyRef#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecContainersEnvValueFromConfigMapKeyRef#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap or its key must be defined
   *
   * @schema PrometheusSpecContainersEnvValueFromConfigMapKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
 *
 * @schema PrometheusSpecContainersEnvValueFromFieldRef
 */
export interface PrometheusSpecContainersEnvValueFromFieldRef {
  /**
   * Version of the schema the FieldPath is written in terms of, defaults to "v1".
   *
   * @schema PrometheusSpecContainersEnvValueFromFieldRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Path of the field to select in the specified API version.
   *
   * @schema PrometheusSpecContainersEnvValueFromFieldRef#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
 *
 * @schema PrometheusSpecContainersEnvValueFromResourceFieldRef
 */
export interface PrometheusSpecContainersEnvValueFromResourceFieldRef {
  /**
   * Container name: required for volumes, optional for env vars
   *
   * @schema PrometheusSpecContainersEnvValueFromResourceFieldRef#containerName
   */
  readonly containerName?: string;

  /**
   * Specifies the output format of the exposed resources, defaults to "1"
   *
   * @schema PrometheusSpecContainersEnvValueFromResourceFieldRef#divisor
   */
  readonly divisor?: string;

  /**
   * Required: resource to select
   *
   * @schema PrometheusSpecContainersEnvValueFromResourceFieldRef#resource
   */
  readonly resource: string;

}

/**
 * Selects a key of a secret in the pod's namespace
 *
 * @schema PrometheusSpecContainersEnvValueFromSecretKeyRef
 */
export interface PrometheusSpecContainersEnvValueFromSecretKeyRef {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecContainersEnvValueFromSecretKeyRef#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecContainersEnvValueFromSecretKeyRef#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecContainersEnvValueFromSecretKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PrometheusSpecContainersLifecyclePostStartExec
 */
export interface PrometheusSpecContainersLifecyclePostStartExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PrometheusSpecContainersLifecyclePostStartExec#command
   */
  readonly command?: string[];

}

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PrometheusSpecContainersLifecyclePostStartHttpGet
 */
export interface PrometheusSpecContainersLifecyclePostStartHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PrometheusSpecContainersLifecyclePostStartHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PrometheusSpecContainersLifecyclePostStartHttpGet#httpHeaders
   */
  readonly httpHeaders?: PrometheusSpecContainersLifecyclePostStartHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PrometheusSpecContainersLifecyclePostStartHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PrometheusSpecContainersLifecyclePostStartHttpGet#port
   */
  readonly port: PrometheusSpecContainersLifecyclePostStartHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PrometheusSpecContainersLifecyclePostStartHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PrometheusSpecContainersLifecyclePostStartTcpSocket
 */
export interface PrometheusSpecContainersLifecyclePostStartTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PrometheusSpecContainersLifecyclePostStartTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PrometheusSpecContainersLifecyclePostStartTcpSocket#port
   */
  readonly port: PrometheusSpecContainersLifecyclePostStartTcpSocketPort;

}

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PrometheusSpecContainersLifecyclePreStopExec
 */
export interface PrometheusSpecContainersLifecyclePreStopExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PrometheusSpecContainersLifecyclePreStopExec#command
   */
  readonly command?: string[];

}

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PrometheusSpecContainersLifecyclePreStopHttpGet
 */
export interface PrometheusSpecContainersLifecyclePreStopHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PrometheusSpecContainersLifecyclePreStopHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PrometheusSpecContainersLifecyclePreStopHttpGet#httpHeaders
   */
  readonly httpHeaders?: PrometheusSpecContainersLifecyclePreStopHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PrometheusSpecContainersLifecyclePreStopHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PrometheusSpecContainersLifecyclePreStopHttpGet#port
   */
  readonly port: PrometheusSpecContainersLifecyclePreStopHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PrometheusSpecContainersLifecyclePreStopHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PrometheusSpecContainersLifecyclePreStopTcpSocket
 */
export interface PrometheusSpecContainersLifecyclePreStopTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PrometheusSpecContainersLifecyclePreStopTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PrometheusSpecContainersLifecyclePreStopTcpSocket#port
   */
  readonly port: PrometheusSpecContainersLifecyclePreStopTcpSocketPort;

}

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PrometheusSpecContainersLivenessProbeHttpGetHttpHeaders
 */
export interface PrometheusSpecContainersLivenessProbeHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PrometheusSpecContainersLivenessProbeHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PrometheusSpecContainersLivenessProbeHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PrometheusSpecContainersLivenessProbeHttpGetPort
 */
export class PrometheusSpecContainersLivenessProbeHttpGetPort {
  public static fromNumber(value: number): PrometheusSpecContainersLivenessProbeHttpGetPort {
    return new PrometheusSpecContainersLivenessProbeHttpGetPort(value);
  }
  public static fromString(value: string): PrometheusSpecContainersLivenessProbeHttpGetPort {
    return new PrometheusSpecContainersLivenessProbeHttpGetPort(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PrometheusSpecContainersLivenessProbeTcpSocketPort
 */
export class PrometheusSpecContainersLivenessProbeTcpSocketPort {
  public static fromNumber(value: number): PrometheusSpecContainersLivenessProbeTcpSocketPort {
    return new PrometheusSpecContainersLivenessProbeTcpSocketPort(value);
  }
  public static fromString(value: string): PrometheusSpecContainersLivenessProbeTcpSocketPort {
    return new PrometheusSpecContainersLivenessProbeTcpSocketPort(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PrometheusSpecContainersReadinessProbeHttpGetHttpHeaders
 */
export interface PrometheusSpecContainersReadinessProbeHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PrometheusSpecContainersReadinessProbeHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PrometheusSpecContainersReadinessProbeHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PrometheusSpecContainersReadinessProbeHttpGetPort
 */
export class PrometheusSpecContainersReadinessProbeHttpGetPort {
  public static fromNumber(value: number): PrometheusSpecContainersReadinessProbeHttpGetPort {
    return new PrometheusSpecContainersReadinessProbeHttpGetPort(value);
  }
  public static fromString(value: string): PrometheusSpecContainersReadinessProbeHttpGetPort {
    return new PrometheusSpecContainersReadinessProbeHttpGetPort(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PrometheusSpecContainersReadinessProbeTcpSocketPort
 */
export class PrometheusSpecContainersReadinessProbeTcpSocketPort {
  public static fromNumber(value: number): PrometheusSpecContainersReadinessProbeTcpSocketPort {
    return new PrometheusSpecContainersReadinessProbeTcpSocketPort(value);
  }
  public static fromString(value: string): PrometheusSpecContainersReadinessProbeTcpSocketPort {
    return new PrometheusSpecContainersReadinessProbeTcpSocketPort(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PrometheusSpecContainersStartupProbeHttpGetHttpHeaders
 */
export interface PrometheusSpecContainersStartupProbeHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PrometheusSpecContainersStartupProbeHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PrometheusSpecContainersStartupProbeHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PrometheusSpecContainersStartupProbeHttpGetPort
 */
export class PrometheusSpecContainersStartupProbeHttpGetPort {
  public static fromNumber(value: number): PrometheusSpecContainersStartupProbeHttpGetPort {
    return new PrometheusSpecContainersStartupProbeHttpGetPort(value);
  }
  public static fromString(value: string): PrometheusSpecContainersStartupProbeHttpGetPort {
    return new PrometheusSpecContainersStartupProbeHttpGetPort(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PrometheusSpecContainersStartupProbeTcpSocketPort
 */
export class PrometheusSpecContainersStartupProbeTcpSocketPort {
  public static fromNumber(value: number): PrometheusSpecContainersStartupProbeTcpSocketPort {
    return new PrometheusSpecContainersStartupProbeTcpSocketPort(value);
  }
  public static fromString(value: string): PrometheusSpecContainersStartupProbeTcpSocketPort {
    return new PrometheusSpecContainersStartupProbeTcpSocketPort(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * Selects a key of a ConfigMap.
 *
 * @schema PrometheusSpecInitContainersEnvValueFromConfigMapKeyRef
 */
export interface PrometheusSpecInitContainersEnvValueFromConfigMapKeyRef {
  /**
   * The key to select.
   *
   * @schema PrometheusSpecInitContainersEnvValueFromConfigMapKeyRef#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecInitContainersEnvValueFromConfigMapKeyRef#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap or its key must be defined
   *
   * @schema PrometheusSpecInitContainersEnvValueFromConfigMapKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
 *
 * @schema PrometheusSpecInitContainersEnvValueFromFieldRef
 */
export interface PrometheusSpecInitContainersEnvValueFromFieldRef {
  /**
   * Version of the schema the FieldPath is written in terms of, defaults to "v1".
   *
   * @schema PrometheusSpecInitContainersEnvValueFromFieldRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Path of the field to select in the specified API version.
   *
   * @schema PrometheusSpecInitContainersEnvValueFromFieldRef#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
 *
 * @schema PrometheusSpecInitContainersEnvValueFromResourceFieldRef
 */
export interface PrometheusSpecInitContainersEnvValueFromResourceFieldRef {
  /**
   * Container name: required for volumes, optional for env vars
   *
   * @schema PrometheusSpecInitContainersEnvValueFromResourceFieldRef#containerName
   */
  readonly containerName?: string;

  /**
   * Specifies the output format of the exposed resources, defaults to "1"
   *
   * @schema PrometheusSpecInitContainersEnvValueFromResourceFieldRef#divisor
   */
  readonly divisor?: string;

  /**
   * Required: resource to select
   *
   * @schema PrometheusSpecInitContainersEnvValueFromResourceFieldRef#resource
   */
  readonly resource: string;

}

/**
 * Selects a key of a secret in the pod's namespace
 *
 * @schema PrometheusSpecInitContainersEnvValueFromSecretKeyRef
 */
export interface PrometheusSpecInitContainersEnvValueFromSecretKeyRef {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecInitContainersEnvValueFromSecretKeyRef#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecInitContainersEnvValueFromSecretKeyRef#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecInitContainersEnvValueFromSecretKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PrometheusSpecInitContainersLifecyclePostStartExec
 */
export interface PrometheusSpecInitContainersLifecyclePostStartExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PrometheusSpecInitContainersLifecyclePostStartExec#command
   */
  readonly command?: string[];

}

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PrometheusSpecInitContainersLifecyclePostStartHttpGet
 */
export interface PrometheusSpecInitContainersLifecyclePostStartHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PrometheusSpecInitContainersLifecyclePostStartHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PrometheusSpecInitContainersLifecyclePostStartHttpGet#httpHeaders
   */
  readonly httpHeaders?: PrometheusSpecInitContainersLifecyclePostStartHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PrometheusSpecInitContainersLifecyclePostStartHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PrometheusSpecInitContainersLifecyclePostStartHttpGet#port
   */
  readonly port: PrometheusSpecInitContainersLifecyclePostStartHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PrometheusSpecInitContainersLifecyclePostStartHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PrometheusSpecInitContainersLifecyclePostStartTcpSocket
 */
export interface PrometheusSpecInitContainersLifecyclePostStartTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PrometheusSpecInitContainersLifecyclePostStartTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PrometheusSpecInitContainersLifecyclePostStartTcpSocket#port
   */
  readonly port: PrometheusSpecInitContainersLifecyclePostStartTcpSocketPort;

}

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PrometheusSpecInitContainersLifecyclePreStopExec
 */
export interface PrometheusSpecInitContainersLifecyclePreStopExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PrometheusSpecInitContainersLifecyclePreStopExec#command
   */
  readonly command?: string[];

}

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PrometheusSpecInitContainersLifecyclePreStopHttpGet
 */
export interface PrometheusSpecInitContainersLifecyclePreStopHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PrometheusSpecInitContainersLifecyclePreStopHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PrometheusSpecInitContainersLifecyclePreStopHttpGet#httpHeaders
   */
  readonly httpHeaders?: PrometheusSpecInitContainersLifecyclePreStopHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PrometheusSpecInitContainersLifecyclePreStopHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PrometheusSpecInitContainersLifecyclePreStopHttpGet#port
   */
  readonly port: PrometheusSpecInitContainersLifecyclePreStopHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PrometheusSpecInitContainersLifecyclePreStopHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PrometheusSpecInitContainersLifecyclePreStopTcpSocket
 */
export interface PrometheusSpecInitContainersLifecyclePreStopTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PrometheusSpecInitContainersLifecyclePreStopTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PrometheusSpecInitContainersLifecyclePreStopTcpSocket#port
   */
  readonly port: PrometheusSpecInitContainersLifecyclePreStopTcpSocketPort;

}

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PrometheusSpecInitContainersLivenessProbeHttpGetHttpHeaders
 */
export interface PrometheusSpecInitContainersLivenessProbeHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PrometheusSpecInitContainersLivenessProbeHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PrometheusSpecInitContainersLivenessProbeHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PrometheusSpecInitContainersLivenessProbeHttpGetPort
 */
export class PrometheusSpecInitContainersLivenessProbeHttpGetPort {
  public static fromNumber(value: number): PrometheusSpecInitContainersLivenessProbeHttpGetPort {
    return new PrometheusSpecInitContainersLivenessProbeHttpGetPort(value);
  }
  public static fromString(value: string): PrometheusSpecInitContainersLivenessProbeHttpGetPort {
    return new PrometheusSpecInitContainersLivenessProbeHttpGetPort(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PrometheusSpecInitContainersLivenessProbeTcpSocketPort
 */
export class PrometheusSpecInitContainersLivenessProbeTcpSocketPort {
  public static fromNumber(value: number): PrometheusSpecInitContainersLivenessProbeTcpSocketPort {
    return new PrometheusSpecInitContainersLivenessProbeTcpSocketPort(value);
  }
  public static fromString(value: string): PrometheusSpecInitContainersLivenessProbeTcpSocketPort {
    return new PrometheusSpecInitContainersLivenessProbeTcpSocketPort(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PrometheusSpecInitContainersReadinessProbeHttpGetHttpHeaders
 */
export interface PrometheusSpecInitContainersReadinessProbeHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PrometheusSpecInitContainersReadinessProbeHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PrometheusSpecInitContainersReadinessProbeHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PrometheusSpecInitContainersReadinessProbeHttpGetPort
 */
export class PrometheusSpecInitContainersReadinessProbeHttpGetPort {
  public static fromNumber(value: number): PrometheusSpecInitContainersReadinessProbeHttpGetPort {
    return new PrometheusSpecInitContainersReadinessProbeHttpGetPort(value);
  }
  public static fromString(value: string): PrometheusSpecInitContainersReadinessProbeHttpGetPort {
    return new PrometheusSpecInitContainersReadinessProbeHttpGetPort(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PrometheusSpecInitContainersReadinessProbeTcpSocketPort
 */
export class PrometheusSpecInitContainersReadinessProbeTcpSocketPort {
  public static fromNumber(value: number): PrometheusSpecInitContainersReadinessProbeTcpSocketPort {
    return new PrometheusSpecInitContainersReadinessProbeTcpSocketPort(value);
  }
  public static fromString(value: string): PrometheusSpecInitContainersReadinessProbeTcpSocketPort {
    return new PrometheusSpecInitContainersReadinessProbeTcpSocketPort(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PrometheusSpecInitContainersStartupProbeHttpGetHttpHeaders
 */
export interface PrometheusSpecInitContainersStartupProbeHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PrometheusSpecInitContainersStartupProbeHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PrometheusSpecInitContainersStartupProbeHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PrometheusSpecInitContainersStartupProbeHttpGetPort
 */
export class PrometheusSpecInitContainersStartupProbeHttpGetPort {
  public static fromNumber(value: number): PrometheusSpecInitContainersStartupProbeHttpGetPort {
    return new PrometheusSpecInitContainersStartupProbeHttpGetPort(value);
  }
  public static fromString(value: string): PrometheusSpecInitContainersStartupProbeHttpGetPort {
    return new PrometheusSpecInitContainersStartupProbeHttpGetPort(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PrometheusSpecInitContainersStartupProbeTcpSocketPort
 */
export class PrometheusSpecInitContainersStartupProbeTcpSocketPort {
  public static fromNumber(value: number): PrometheusSpecInitContainersStartupProbeTcpSocketPort {
    return new PrometheusSpecInitContainersStartupProbeTcpSocketPort(value);
  }
  public static fromString(value: string): PrometheusSpecInitContainersStartupProbeTcpSocketPort {
    return new PrometheusSpecInitContainersStartupProbeTcpSocketPort(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * ConfigMap containing data to use for the targets.
 *
 * @schema PrometheusSpecRemoteReadTlsConfigCaConfigMap
 */
export interface PrometheusSpecRemoteReadTlsConfigCaConfigMap {
  /**
   * The key to select.
   *
   * @schema PrometheusSpecRemoteReadTlsConfigCaConfigMap#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecRemoteReadTlsConfigCaConfigMap#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap or its key must be defined
   *
   * @schema PrometheusSpecRemoteReadTlsConfigCaConfigMap#optional
   */
  readonly optional?: boolean;

}

/**
 * Secret containing data to use for the targets.
 *
 * @schema PrometheusSpecRemoteReadTlsConfigCaSecret
 */
export interface PrometheusSpecRemoteReadTlsConfigCaSecret {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecRemoteReadTlsConfigCaSecret#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecRemoteReadTlsConfigCaSecret#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecRemoteReadTlsConfigCaSecret#optional
   */
  readonly optional?: boolean;

}

/**
 * ConfigMap containing data to use for the targets.
 *
 * @schema PrometheusSpecRemoteReadTlsConfigCertConfigMap
 */
export interface PrometheusSpecRemoteReadTlsConfigCertConfigMap {
  /**
   * The key to select.
   *
   * @schema PrometheusSpecRemoteReadTlsConfigCertConfigMap#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecRemoteReadTlsConfigCertConfigMap#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap or its key must be defined
   *
   * @schema PrometheusSpecRemoteReadTlsConfigCertConfigMap#optional
   */
  readonly optional?: boolean;

}

/**
 * Secret containing data to use for the targets.
 *
 * @schema PrometheusSpecRemoteReadTlsConfigCertSecret
 */
export interface PrometheusSpecRemoteReadTlsConfigCertSecret {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecRemoteReadTlsConfigCertSecret#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecRemoteReadTlsConfigCertSecret#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecRemoteReadTlsConfigCertSecret#optional
   */
  readonly optional?: boolean;

}

/**
 * ConfigMap containing data to use for the targets.
 *
 * @schema PrometheusSpecRemoteWriteTlsConfigCaConfigMap
 */
export interface PrometheusSpecRemoteWriteTlsConfigCaConfigMap {
  /**
   * The key to select.
   *
   * @schema PrometheusSpecRemoteWriteTlsConfigCaConfigMap#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecRemoteWriteTlsConfigCaConfigMap#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap or its key must be defined
   *
   * @schema PrometheusSpecRemoteWriteTlsConfigCaConfigMap#optional
   */
  readonly optional?: boolean;

}

/**
 * Secret containing data to use for the targets.
 *
 * @schema PrometheusSpecRemoteWriteTlsConfigCaSecret
 */
export interface PrometheusSpecRemoteWriteTlsConfigCaSecret {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecRemoteWriteTlsConfigCaSecret#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecRemoteWriteTlsConfigCaSecret#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecRemoteWriteTlsConfigCaSecret#optional
   */
  readonly optional?: boolean;

}

/**
 * ConfigMap containing data to use for the targets.
 *
 * @schema PrometheusSpecRemoteWriteTlsConfigCertConfigMap
 */
export interface PrometheusSpecRemoteWriteTlsConfigCertConfigMap {
  /**
   * The key to select.
   *
   * @schema PrometheusSpecRemoteWriteTlsConfigCertConfigMap#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecRemoteWriteTlsConfigCertConfigMap#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap or its key must be defined
   *
   * @schema PrometheusSpecRemoteWriteTlsConfigCertConfigMap#optional
   */
  readonly optional?: boolean;

}

/**
 * Secret containing data to use for the targets.
 *
 * @schema PrometheusSpecRemoteWriteTlsConfigCertSecret
 */
export interface PrometheusSpecRemoteWriteTlsConfigCertSecret {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecRemoteWriteTlsConfigCertSecret#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecRemoteWriteTlsConfigCertSecret#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecRemoteWriteTlsConfigCertSecret#optional
   */
  readonly optional?: boolean;

}

/**
 * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
 *
 * @schema PrometheusSpecStorageVolumeClaimTemplateSpecDataSource
 */
export interface PrometheusSpecStorageVolumeClaimTemplateSpecDataSource {
  /**
   * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateSpecDataSource#apiGroup
   */
  readonly apiGroup?: string;

  /**
   * Kind is the type of resource being referenced
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateSpecDataSource#kind
   */
  readonly kind: string;

  /**
   * Name is the name of resource being referenced
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateSpecDataSource#name
   */
  readonly name: string;

}

/**
 * Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
 *
 * @schema PrometheusSpecStorageVolumeClaimTemplateSpecResources
 */
export interface PrometheusSpecStorageVolumeClaimTemplateSpecResources {
  /**
   * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateSpecResources#limits
   */
  readonly limits?: { [key: string]: string };

  /**
   * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateSpecResources#requests
   */
  readonly requests?: { [key: string]: string };

}

/**
 * A label query over volumes to consider for binding.
 *
 * @schema PrometheusSpecStorageVolumeClaimTemplateSpecSelector
 */
export interface PrometheusSpecStorageVolumeClaimTemplateSpecSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateSpecSelector#matchExpressions
   */
  readonly matchExpressions?: PrometheusSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateSpecSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * PersistentVolumeClaimCondition contails details about state of pvc
 *
 * @schema PrometheusSpecStorageVolumeClaimTemplateStatusConditions
 */
export interface PrometheusSpecStorageVolumeClaimTemplateStatusConditions {
  /**
   * Last time we probed the condition.
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateStatusConditions#lastProbeTime
   */
  readonly lastProbeTime?: Date;

  /**
   * Last time the condition transitioned from one status to another.
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateStatusConditions#lastTransitionTime
   */
  readonly lastTransitionTime?: Date;

  /**
   * Human-readable message indicating details about last transition.
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateStatusConditions#message
   */
  readonly message?: string;

  /**
   * Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateStatusConditions#reason
   */
  readonly reason?: string;

  /**
   * @schema PrometheusSpecStorageVolumeClaimTemplateStatusConditions#status
   */
  readonly status: string;

  /**
   * PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateStatusConditions#type
   */
  readonly type: string;

}

/**
 * ConfigMap containing data to use for the targets.
 *
 * @schema PrometheusSpecThanosGrpcServerTlsConfigCaConfigMap
 */
export interface PrometheusSpecThanosGrpcServerTlsConfigCaConfigMap {
  /**
   * The key to select.
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfigCaConfigMap#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfigCaConfigMap#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap or its key must be defined
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfigCaConfigMap#optional
   */
  readonly optional?: boolean;

}

/**
 * Secret containing data to use for the targets.
 *
 * @schema PrometheusSpecThanosGrpcServerTlsConfigCaSecret
 */
export interface PrometheusSpecThanosGrpcServerTlsConfigCaSecret {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfigCaSecret#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfigCaSecret#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfigCaSecret#optional
   */
  readonly optional?: boolean;

}

/**
 * ConfigMap containing data to use for the targets.
 *
 * @schema PrometheusSpecThanosGrpcServerTlsConfigCertConfigMap
 */
export interface PrometheusSpecThanosGrpcServerTlsConfigCertConfigMap {
  /**
   * The key to select.
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfigCertConfigMap#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfigCertConfigMap#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap or its key must be defined
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfigCertConfigMap#optional
   */
  readonly optional?: boolean;

}

/**
 * Secret containing data to use for the targets.
 *
 * @schema PrometheusSpecThanosGrpcServerTlsConfigCertSecret
 */
export interface PrometheusSpecThanosGrpcServerTlsConfigCertSecret {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfigCertSecret#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfigCertSecret#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecThanosGrpcServerTlsConfigCertSecret#optional
   */
  readonly optional?: boolean;

}

/**
 * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
 *
 * @schema PrometheusSpecVolumesDownwardApiItemsFieldRef
 */
export interface PrometheusSpecVolumesDownwardApiItemsFieldRef {
  /**
   * Version of the schema the FieldPath is written in terms of, defaults to "v1".
   *
   * @schema PrometheusSpecVolumesDownwardApiItemsFieldRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Path of the field to select in the specified API version.
   *
   * @schema PrometheusSpecVolumesDownwardApiItemsFieldRef#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
 *
 * @schema PrometheusSpecVolumesDownwardApiItemsResourceFieldRef
 */
export interface PrometheusSpecVolumesDownwardApiItemsResourceFieldRef {
  /**
   * Container name: required for volumes, optional for env vars
   *
   * @schema PrometheusSpecVolumesDownwardApiItemsResourceFieldRef#containerName
   */
  readonly containerName?: string;

  /**
   * Specifies the output format of the exposed resources, defaults to "1"
   *
   * @schema PrometheusSpecVolumesDownwardApiItemsResourceFieldRef#divisor
   */
  readonly divisor?: string;

  /**
   * Required: resource to select
   *
   * @schema PrometheusSpecVolumesDownwardApiItemsResourceFieldRef#resource
   */
  readonly resource: string;

}

/**
 * information about the configMap data to project
 *
 * @schema PrometheusSpecVolumesProjectedSourcesConfigMap
 */
export interface PrometheusSpecVolumesProjectedSourcesConfigMap {
  /**
   * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
   *
   * @schema PrometheusSpecVolumesProjectedSourcesConfigMap#items
   */
  readonly items?: PrometheusSpecVolumesProjectedSourcesConfigMapItems[];

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecVolumesProjectedSourcesConfigMap#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap or its keys must be defined
   *
   * @schema PrometheusSpecVolumesProjectedSourcesConfigMap#optional
   */
  readonly optional?: boolean;

}

/**
 * information about the downwardAPI data to project
 *
 * @schema PrometheusSpecVolumesProjectedSourcesDownwardApi
 */
export interface PrometheusSpecVolumesProjectedSourcesDownwardApi {
  /**
   * Items is a list of DownwardAPIVolume file
   *
   * @schema PrometheusSpecVolumesProjectedSourcesDownwardApi#items
   */
  readonly items?: PrometheusSpecVolumesProjectedSourcesDownwardApiItems[];

}

/**
 * information about the secret data to project
 *
 * @schema PrometheusSpecVolumesProjectedSourcesSecret
 */
export interface PrometheusSpecVolumesProjectedSourcesSecret {
  /**
   * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
   *
   * @schema PrometheusSpecVolumesProjectedSourcesSecret#items
   */
  readonly items?: PrometheusSpecVolumesProjectedSourcesSecretItems[];

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecVolumesProjectedSourcesSecret#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecVolumesProjectedSourcesSecret#optional
   */
  readonly optional?: boolean;

}

/**
 * information about the serviceAccountToken data to project
 *
 * @schema PrometheusSpecVolumesProjectedSourcesServiceAccountToken
 */
export interface PrometheusSpecVolumesProjectedSourcesServiceAccountToken {
  /**
   * Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
   *
   * @schema PrometheusSpecVolumesProjectedSourcesServiceAccountToken#audience
   */
  readonly audience?: string;

  /**
   * ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
   *
   * @default 1 hour and must be at least 10 minutes.
   * @schema PrometheusSpecVolumesProjectedSourcesServiceAccountToken#expirationSeconds
   */
  readonly expirationSeconds?: number;

  /**
   * Path is the path relative to the mount point of the file to project the token into.
   *
   * @schema PrometheusSpecVolumesProjectedSourcesServiceAccountToken#path
   */
  readonly path: string;

}

/**
 * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions
 */
export interface PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
  /**
   * The label key that the selector applies to.
   *
   * @schema PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#key
   */
  readonly key: string;

  /**
   * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
   *
   * @schema PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
   *
   * @schema PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields
 */
export interface PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
  /**
   * The label key that the selector applies to.
   *
   * @schema PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#key
   */
  readonly key: string;

  /**
   * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
   *
   * @schema PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#operator
   */
  readonly operator: string;

  /**
   * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
   *
   * @schema PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#values
   */
  readonly values?: string[];

}

/**
 * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions
 */
export interface PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
  /**
   * The label key that the selector applies to.
   *
   * @schema PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#key
   */
  readonly key: string;

  /**
   * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
   *
   * @schema PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
   *
   * @schema PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields
 */
export interface PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
  /**
   * The label key that the selector applies to.
   *
   * @schema PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#key
   */
  readonly key: string;

  /**
   * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
   *
   * @schema PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#operator
   */
  readonly operator: string;

  /**
   * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
   *
   * @schema PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#values
   */
  readonly values?: string[];

}

/**
 * A label query over a set of resources, in this case pods.
 *
 * @schema PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
 */
export interface PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchExpressions
   */
  readonly matchExpressions?: PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
 */
export interface PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * A label query over a set of resources, in this case pods.
 *
 * @schema PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
 */
export interface PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchExpressions
   */
  readonly matchExpressions?: PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
 */
export interface PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * ConfigMap containing data to use for the targets.
 *
 * @schema PrometheusSpecAlertingAlertmanagersTlsConfigCaConfigMap
 */
export interface PrometheusSpecAlertingAlertmanagersTlsConfigCaConfigMap {
  /**
   * The key to select.
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfigCaConfigMap#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfigCaConfigMap#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap or its key must be defined
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfigCaConfigMap#optional
   */
  readonly optional?: boolean;

}

/**
 * Secret containing data to use for the targets.
 *
 * @schema PrometheusSpecAlertingAlertmanagersTlsConfigCaSecret
 */
export interface PrometheusSpecAlertingAlertmanagersTlsConfigCaSecret {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfigCaSecret#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfigCaSecret#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfigCaSecret#optional
   */
  readonly optional?: boolean;

}

/**
 * ConfigMap containing data to use for the targets.
 *
 * @schema PrometheusSpecAlertingAlertmanagersTlsConfigCertConfigMap
 */
export interface PrometheusSpecAlertingAlertmanagersTlsConfigCertConfigMap {
  /**
   * The key to select.
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfigCertConfigMap#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfigCertConfigMap#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap or its key must be defined
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfigCertConfigMap#optional
   */
  readonly optional?: boolean;

}

/**
 * Secret containing data to use for the targets.
 *
 * @schema PrometheusSpecAlertingAlertmanagersTlsConfigCertSecret
 */
export interface PrometheusSpecAlertingAlertmanagersTlsConfigCertSecret {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfigCertSecret#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfigCertSecret#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PrometheusSpecAlertingAlertmanagersTlsConfigCertSecret#optional
   */
  readonly optional?: boolean;

}

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PrometheusSpecContainersLifecyclePostStartHttpGetHttpHeaders
 */
export interface PrometheusSpecContainersLifecyclePostStartHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PrometheusSpecContainersLifecyclePostStartHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PrometheusSpecContainersLifecyclePostStartHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PrometheusSpecContainersLifecyclePostStartHttpGetPort
 */
export class PrometheusSpecContainersLifecyclePostStartHttpGetPort {
  public static fromNumber(value: number): PrometheusSpecContainersLifecyclePostStartHttpGetPort {
    return new PrometheusSpecContainersLifecyclePostStartHttpGetPort(value);
  }
  public static fromString(value: string): PrometheusSpecContainersLifecyclePostStartHttpGetPort {
    return new PrometheusSpecContainersLifecyclePostStartHttpGetPort(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PrometheusSpecContainersLifecyclePostStartTcpSocketPort
 */
export class PrometheusSpecContainersLifecyclePostStartTcpSocketPort {
  public static fromNumber(value: number): PrometheusSpecContainersLifecyclePostStartTcpSocketPort {
    return new PrometheusSpecContainersLifecyclePostStartTcpSocketPort(value);
  }
  public static fromString(value: string): PrometheusSpecContainersLifecyclePostStartTcpSocketPort {
    return new PrometheusSpecContainersLifecyclePostStartTcpSocketPort(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PrometheusSpecContainersLifecyclePreStopHttpGetHttpHeaders
 */
export interface PrometheusSpecContainersLifecyclePreStopHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PrometheusSpecContainersLifecyclePreStopHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PrometheusSpecContainersLifecyclePreStopHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PrometheusSpecContainersLifecyclePreStopHttpGetPort
 */
export class PrometheusSpecContainersLifecyclePreStopHttpGetPort {
  public static fromNumber(value: number): PrometheusSpecContainersLifecyclePreStopHttpGetPort {
    return new PrometheusSpecContainersLifecyclePreStopHttpGetPort(value);
  }
  public static fromString(value: string): PrometheusSpecContainersLifecyclePreStopHttpGetPort {
    return new PrometheusSpecContainersLifecyclePreStopHttpGetPort(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PrometheusSpecContainersLifecyclePreStopTcpSocketPort
 */
export class PrometheusSpecContainersLifecyclePreStopTcpSocketPort {
  public static fromNumber(value: number): PrometheusSpecContainersLifecyclePreStopTcpSocketPort {
    return new PrometheusSpecContainersLifecyclePreStopTcpSocketPort(value);
  }
  public static fromString(value: string): PrometheusSpecContainersLifecyclePreStopTcpSocketPort {
    return new PrometheusSpecContainersLifecyclePreStopTcpSocketPort(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PrometheusSpecInitContainersLifecyclePostStartHttpGetHttpHeaders
 */
export interface PrometheusSpecInitContainersLifecyclePostStartHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PrometheusSpecInitContainersLifecyclePostStartHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PrometheusSpecInitContainersLifecyclePostStartHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PrometheusSpecInitContainersLifecyclePostStartHttpGetPort
 */
export class PrometheusSpecInitContainersLifecyclePostStartHttpGetPort {
  public static fromNumber(value: number): PrometheusSpecInitContainersLifecyclePostStartHttpGetPort {
    return new PrometheusSpecInitContainersLifecyclePostStartHttpGetPort(value);
  }
  public static fromString(value: string): PrometheusSpecInitContainersLifecyclePostStartHttpGetPort {
    return new PrometheusSpecInitContainersLifecyclePostStartHttpGetPort(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PrometheusSpecInitContainersLifecyclePostStartTcpSocketPort
 */
export class PrometheusSpecInitContainersLifecyclePostStartTcpSocketPort {
  public static fromNumber(value: number): PrometheusSpecInitContainersLifecyclePostStartTcpSocketPort {
    return new PrometheusSpecInitContainersLifecyclePostStartTcpSocketPort(value);
  }
  public static fromString(value: string): PrometheusSpecInitContainersLifecyclePostStartTcpSocketPort {
    return new PrometheusSpecInitContainersLifecyclePostStartTcpSocketPort(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PrometheusSpecInitContainersLifecyclePreStopHttpGetHttpHeaders
 */
export interface PrometheusSpecInitContainersLifecyclePreStopHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PrometheusSpecInitContainersLifecyclePreStopHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PrometheusSpecInitContainersLifecyclePreStopHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PrometheusSpecInitContainersLifecyclePreStopHttpGetPort
 */
export class PrometheusSpecInitContainersLifecyclePreStopHttpGetPort {
  public static fromNumber(value: number): PrometheusSpecInitContainersLifecyclePreStopHttpGetPort {
    return new PrometheusSpecInitContainersLifecyclePreStopHttpGetPort(value);
  }
  public static fromString(value: string): PrometheusSpecInitContainersLifecyclePreStopHttpGetPort {
    return new PrometheusSpecInitContainersLifecyclePreStopHttpGetPort(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PrometheusSpecInitContainersLifecyclePreStopTcpSocketPort
 */
export class PrometheusSpecInitContainersLifecyclePreStopTcpSocketPort {
  public static fromNumber(value: number): PrometheusSpecInitContainersLifecyclePreStopTcpSocketPort {
    return new PrometheusSpecInitContainersLifecyclePreStopTcpSocketPort(value);
  }
  public static fromString(value: string): PrometheusSpecInitContainersLifecyclePreStopTcpSocketPort {
    return new PrometheusSpecInitContainersLifecyclePreStopTcpSocketPort(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PrometheusSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions
 */
export interface PrometheusSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema PrometheusSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Maps a string key to a path within a volume.
 *
 * @schema PrometheusSpecVolumesProjectedSourcesConfigMapItems
 */
export interface PrometheusSpecVolumesProjectedSourcesConfigMapItems {
  /**
   * The key to project.
   *
   * @schema PrometheusSpecVolumesProjectedSourcesConfigMapItems#key
   */
  readonly key: string;

  /**
   * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   *
   * @schema PrometheusSpecVolumesProjectedSourcesConfigMapItems#mode
   */
  readonly mode?: number;

  /**
   * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
   *
   * @schema PrometheusSpecVolumesProjectedSourcesConfigMapItems#path
   */
  readonly path: string;

}

/**
 * DownwardAPIVolumeFile represents information to create the file containing the pod field
 *
 * @schema PrometheusSpecVolumesProjectedSourcesDownwardApiItems
 */
export interface PrometheusSpecVolumesProjectedSourcesDownwardApiItems {
  /**
   * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
   *
   * @schema PrometheusSpecVolumesProjectedSourcesDownwardApiItems#fieldRef
   */
  readonly fieldRef?: PrometheusSpecVolumesProjectedSourcesDownwardApiItemsFieldRef;

  /**
   * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   *
   * @schema PrometheusSpecVolumesProjectedSourcesDownwardApiItems#mode
   */
  readonly mode?: number;

  /**
   * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
   *
   * @schema PrometheusSpecVolumesProjectedSourcesDownwardApiItems#path
   */
  readonly path: string;

  /**
   * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
   *
   * @schema PrometheusSpecVolumesProjectedSourcesDownwardApiItems#resourceFieldRef
   */
  readonly resourceFieldRef?: PrometheusSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef;

}

/**
 * Maps a string key to a path within a volume.
 *
 * @schema PrometheusSpecVolumesProjectedSourcesSecretItems
 */
export interface PrometheusSpecVolumesProjectedSourcesSecretItems {
  /**
   * The key to project.
   *
   * @schema PrometheusSpecVolumesProjectedSourcesSecretItems#key
   */
  readonly key: string;

  /**
   * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   *
   * @schema PrometheusSpecVolumesProjectedSourcesSecretItems#mode
   */
  readonly mode?: number;

  /**
   * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
   *
   * @schema PrometheusSpecVolumesProjectedSourcesSecretItems#path
   */
  readonly path: string;

}

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
 */
export interface PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
 */
export interface PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
 *
 * @schema PrometheusSpecVolumesProjectedSourcesDownwardApiItemsFieldRef
 */
export interface PrometheusSpecVolumesProjectedSourcesDownwardApiItemsFieldRef {
  /**
   * Version of the schema the FieldPath is written in terms of, defaults to "v1".
   *
   * @schema PrometheusSpecVolumesProjectedSourcesDownwardApiItemsFieldRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Path of the field to select in the specified API version.
   *
   * @schema PrometheusSpecVolumesProjectedSourcesDownwardApiItemsFieldRef#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
 *
 * @schema PrometheusSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef
 */
export interface PrometheusSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef {
  /**
   * Container name: required for volumes, optional for env vars
   *
   * @schema PrometheusSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef#containerName
   */
  readonly containerName?: string;

  /**
   * Specifies the output format of the exposed resources, defaults to "1"
   *
   * @schema PrometheusSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef#divisor
   */
  readonly divisor?: string;

  /**
   * Required: resource to select
   *
   * @schema PrometheusSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef#resource
   */
  readonly resource: string;

}

