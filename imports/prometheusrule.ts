// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * PrometheusRule defines alerting rules for a Prometheus instance
 *
 * @schema PrometheusRule
 */
export class PrometheusRule extends ApiObject {
  /**
   * Defines a "PrometheusRule" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: PrometheusRuleOptions) {
    super(scope, name, {
      ...options,
      kind: 'PrometheusRule',
      apiVersion: 'monitoring.coreos.com/v1',
    });
  }
}

/**
 * PrometheusRule defines alerting rules for a Prometheus instance
 *
 * @schema PrometheusRule
 */
export interface PrometheusRuleOptions {
  /**
   * @schema PrometheusRule#metadata
   */
  readonly metadata?: any;

  /**
   * Specification of desired alerting rule definitions for Prometheus.
   *
   * @schema PrometheusRule#spec
   */
  readonly spec: PrometheusRuleSpec;

}

/**
 * Specification of desired alerting rule definitions for Prometheus.
 *
 * @schema PrometheusRuleSpec
 */
export interface PrometheusRuleSpec {
  /**
   * Content of Prometheus rule file
   *
   * @schema PrometheusRuleSpec#groups
   */
  readonly groups?: PrometheusRuleSpecGroups[];

}

/**
 * RuleGroup is a list of sequentially evaluated recording and alerting rules. Note: PartialResponseStrategy is only used by ThanosRuler and will be ignored by Prometheus instances.  Valid values for this field are 'warn' or 'abort'.  More info: https://github.com/thanos-io/thanos/blob/master/docs/components/rule.md#partial-response
 *
 * @schema PrometheusRuleSpecGroups
 */
export interface PrometheusRuleSpecGroups {
  /**
   * @schema PrometheusRuleSpecGroups#interval
   */
  readonly interval?: string;

  /**
   * @schema PrometheusRuleSpecGroups#name
   */
  readonly name: string;

  /**
   * @schema PrometheusRuleSpecGroups#partial_response_strategy
   */
  readonly partial_response_strategy?: string;

  /**
   * @schema PrometheusRuleSpecGroups#rules
   */
  readonly rules: PrometheusRuleSpecGroupsRules[];

}

/**
 * Rule describes an alerting or recording rule.
 *
 * @schema PrometheusRuleSpecGroupsRules
 */
export interface PrometheusRuleSpecGroupsRules {
  /**
   * @schema PrometheusRuleSpecGroupsRules#alert
   */
  readonly alert?: string;

  /**
   * @schema PrometheusRuleSpecGroupsRules#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema PrometheusRuleSpecGroupsRules#expr
   */
  readonly expr: PrometheusRuleSpecGroupsRulesExpr;

  /**
   * @schema PrometheusRuleSpecGroupsRules#for
   */
  readonly for?: string;

  /**
   * @schema PrometheusRuleSpecGroupsRules#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * @schema PrometheusRuleSpecGroupsRules#record
   */
  readonly record?: string;

}

/**
 * @schema PrometheusRuleSpecGroupsRulesExpr
 */
export class PrometheusRuleSpecGroupsRulesExpr {
  public static fromNumber(value: number): PrometheusRuleSpecGroupsRulesExpr {
    return new PrometheusRuleSpecGroupsRulesExpr(value);
  }
  public static fromString(value: string): PrometheusRuleSpecGroupsRulesExpr {
    return new PrometheusRuleSpecGroupsRulesExpr(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

