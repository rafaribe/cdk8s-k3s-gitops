// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * PodMonitor defines monitoring for a set of pods.
 *
 * @schema PodMonitor
 */
export class PodMonitor extends ApiObject {
  /**
   * Defines a "PodMonitor" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: PodMonitorOptions) {
    super(scope, name, {
      ...options,
      kind: 'PodMonitor',
      apiVersion: 'monitoring.coreos.com/v1',
    });
  }
}

/**
 * PodMonitor defines monitoring for a set of pods.
 *
 * @schema PodMonitor
 */
export interface PodMonitorOptions {
  /**
   * @schema PodMonitor#metadata
   */
  readonly metadata?: any;

  /**
   * Specification of desired Pod selection for target discovery by Prometheus.
   *
   * @schema PodMonitor#spec
   */
  readonly spec: PodMonitorSpec;

}

/**
 * Specification of desired Pod selection for target discovery by Prometheus.
 *
 * @schema PodMonitorSpec
 */
export interface PodMonitorSpec {
  /**
   * The label to use to retrieve the job name from.
   *
   * @schema PodMonitorSpec#jobLabel
   */
  readonly jobLabel?: string;

  /**
   * Selector to select which namespaces the Endpoints objects are discovered from.
   *
   * @schema PodMonitorSpec#namespaceSelector
   */
  readonly namespaceSelector?: PodMonitorSpecNamespaceSelector;

  /**
   * A list of endpoints allowed as part of this PodMonitor.
   *
   * @schema PodMonitorSpec#podMetricsEndpoints
   */
  readonly podMetricsEndpoints: PodMonitorSpecPodMetricsEndpoints[];

  /**
   * PodTargetLabels transfers labels on the Kubernetes Pod onto the target.
   *
   * @schema PodMonitorSpec#podTargetLabels
   */
  readonly podTargetLabels?: string[];

  /**
   * SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.
   *
   * @schema PodMonitorSpec#sampleLimit
   */
  readonly sampleLimit?: number;

  /**
   * Selector to select Pod objects.
   *
   * @schema PodMonitorSpec#selector
   */
  readonly selector: PodMonitorSpecSelector;

}

/**
 * Selector to select which namespaces the Endpoints objects are discovered from.
 *
 * @schema PodMonitorSpecNamespaceSelector
 */
export interface PodMonitorSpecNamespaceSelector {
  /**
   * Boolean describing whether all namespaces are selected in contrast to a list restricting them.
   *
   * @schema PodMonitorSpecNamespaceSelector#any
   */
  readonly any?: boolean;

  /**
   * List of namespace names.
   *
   * @schema PodMonitorSpecNamespaceSelector#matchNames
   */
  readonly matchNames?: string[];

}

/**
 * PodMetricsEndpoint defines a scrapeable endpoint of a Kubernetes Pod serving Prometheus metrics.
 *
 * @schema PodMonitorSpecPodMetricsEndpoints
 */
export interface PodMonitorSpecPodMetricsEndpoints {
  /**
   * HonorLabels chooses the metric's labels on collisions with target labels.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#honorLabels
   */
  readonly honorLabels?: boolean;

  /**
   * HonorTimestamps controls whether Prometheus respects the timestamps present in scraped data.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#honorTimestamps
   */
  readonly honorTimestamps?: boolean;

  /**
   * Interval at which metrics should be scraped
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#interval
   */
  readonly interval?: string;

  /**
   * MetricRelabelConfigs to apply to samples before ingestion.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#metricRelabelings
   */
  readonly metricRelabelings?: PodMonitorSpecPodMetricsEndpointsMetricRelabelings[];

  /**
   * Optional HTTP URL parameters
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#params
   */
  readonly params?: { [key: string]: string[] };

  /**
   * HTTP path to scrape for metrics.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#path
   */
  readonly path?: string;

  /**
   * Name of the pod port this endpoint refers to. Mutually exclusive with targetPort.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#port
   */
  readonly port?: string;

  /**
   * ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#proxyUrl
   */
  readonly proxyUrl?: string;

  /**
   * RelabelConfigs to apply to samples before ingestion. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#relabelings
   */
  readonly relabelings?: PodMonitorSpecPodMetricsEndpointsRelabelings[];

  /**
   * HTTP scheme to use for scraping.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#scheme
   */
  readonly scheme?: string;

  /**
   * Timeout after which the scrape is ended
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#scrapeTimeout
   */
  readonly scrapeTimeout?: string;

  /**
   * Deprecated: Use 'port' instead.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#targetPort
   */
  readonly targetPort?: PodMonitorSpecPodMetricsEndpointsTargetPort;

}

/**
 * Selector to select Pod objects.
 *
 * @schema PodMonitorSpecSelector
 */
export interface PodMonitorSpecSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PodMonitorSpecSelector#matchExpressions
   */
  readonly matchExpressions?: PodMonitorSpecSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PodMonitorSpecSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
 *
 * @schema PodMonitorSpecPodMetricsEndpointsMetricRelabelings
 */
export interface PodMonitorSpecPodMetricsEndpointsMetricRelabelings {
  /**
   * Action to perform based on regex matching. Default is 'replace'
   *
   * @default replace'
   * @schema PodMonitorSpecPodMetricsEndpointsMetricRelabelings#action
   */
  readonly action?: string;

  /**
   * Modulus to take of the hash of the source label values.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsMetricRelabelings#modulus
   */
  readonly modulus?: number;

  /**
   * Regular expression against which the extracted value is matched. Default is '(.*)'
   *
   * @default '
   * @schema PodMonitorSpecPodMetricsEndpointsMetricRelabelings#regex
   */
  readonly regex?: string;

  /**
   * Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'
   *
   * @default 1'
   * @schema PodMonitorSpecPodMetricsEndpointsMetricRelabelings#replacement
   */
  readonly replacement?: string;

  /**
   * Separator placed between concatenated source label values. default is ';'.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsMetricRelabelings#separator
   */
  readonly separator?: string;

  /**
   * The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsMetricRelabelings#sourceLabels
   */
  readonly sourceLabels?: string[];

  /**
   * Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsMetricRelabelings#targetLabel
   */
  readonly targetLabel?: string;

}

/**
 * RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
 *
 * @schema PodMonitorSpecPodMetricsEndpointsRelabelings
 */
export interface PodMonitorSpecPodMetricsEndpointsRelabelings {
  /**
   * Action to perform based on regex matching. Default is 'replace'
   *
   * @default replace'
   * @schema PodMonitorSpecPodMetricsEndpointsRelabelings#action
   */
  readonly action?: string;

  /**
   * Modulus to take of the hash of the source label values.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsRelabelings#modulus
   */
  readonly modulus?: number;

  /**
   * Regular expression against which the extracted value is matched. Default is '(.*)'
   *
   * @default '
   * @schema PodMonitorSpecPodMetricsEndpointsRelabelings#regex
   */
  readonly regex?: string;

  /**
   * Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'
   *
   * @default 1'
   * @schema PodMonitorSpecPodMetricsEndpointsRelabelings#replacement
   */
  readonly replacement?: string;

  /**
   * Separator placed between concatenated source label values. default is ';'.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsRelabelings#separator
   */
  readonly separator?: string;

  /**
   * The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsRelabelings#sourceLabels
   */
  readonly sourceLabels?: string[];

  /**
   * Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsRelabelings#targetLabel
   */
  readonly targetLabel?: string;

}

/**
 * Deprecated: Use 'port' instead.
 *
 * @schema PodMonitorSpecPodMetricsEndpointsTargetPort
 */
export class PodMonitorSpecPodMetricsEndpointsTargetPort {
  public static fromNumber(value: number): PodMonitorSpecPodMetricsEndpointsTargetPort {
    return new PodMonitorSpecPodMetricsEndpointsTargetPort(value);
  }
  public static fromString(value: string): PodMonitorSpecPodMetricsEndpointsTargetPort {
    return new PodMonitorSpecPodMetricsEndpointsTargetPort(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PodMonitorSpecSelectorMatchExpressions
 */
export interface PodMonitorSpecSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PodMonitorSpecSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PodMonitorSpecSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema PodMonitorSpecSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

