"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// generated by cdk8s
const cdk8s_1 = require("cdk8s");
/**
 * HelmRelease is a type to represent a Helm release.
 *
 * @schema HelmRelease
 */
class HelmRelease extends cdk8s_1.ApiObject {
    /**
     * Defines a "HelmRelease" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, Object.assign(Object.assign({}, options), { kind: 'HelmRelease', apiVersion: 'helm.fluxcd.io/v1' }));
    }
}
exports.HelmRelease = HelmRelease;
//# sourceMappingURL=data:application/json;base64,