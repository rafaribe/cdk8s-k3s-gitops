"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// generated by cdk8s
const cdk8s_1 = require("cdk8s");
/**
 * ServiceMonitor defines monitoring for a set of services.
 *
 * @schema ServiceMonitor
 */
class ServiceMonitor extends cdk8s_1.ApiObject {
    /**
     * Defines a "ServiceMonitor" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, Object.assign(Object.assign({}, options), { kind: 'ServiceMonitor', apiVersion: 'monitoring.coreos.com/v1' }));
    }
}
exports.ServiceMonitor = ServiceMonitor;
/**
 * Name or number of the pod port this endpoint refers to. Mutually exclusive with port.
 *
 * @schema ServiceMonitorSpecEndpointsTargetPort
 */
class ServiceMonitorSpecEndpointsTargetPort {
    static fromNumber(value) {
        return new ServiceMonitorSpecEndpointsTargetPort(value);
    }
    static fromString(value) {
        return new ServiceMonitorSpecEndpointsTargetPort(value);
    }
    constructor(value) {
        Object.defineProperty(this, 'resolve', { value: () => value });
    }
}
exports.ServiceMonitorSpecEndpointsTargetPort = ServiceMonitorSpecEndpointsTargetPort;
//# sourceMappingURL=data:application/json;base64,